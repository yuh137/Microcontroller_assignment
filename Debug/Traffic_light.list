
Traffic_light.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026c8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080027d4  080027d4  000127d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027f4  080027f4  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  080027f4  080027f4  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080027f4  080027f4  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027f4  080027f4  000127f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027f8  080027f8  000127f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080027fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000094  20000060  0800285c  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  0800285c  000200f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000087b7  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001989  00000000  00000000  00028840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d8  00000000  00000000  0002a1d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008f0  00000000  00000000  0002aba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c2e  00000000  00000000  0002b498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aa6b  00000000  00000000  000420c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000843ef  00000000  00000000  0004cb31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d0f20  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002750  00000000  00000000  000d0f70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	080027bc 	.word	0x080027bc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	080027bc 	.word	0x080027bc

0800014c <isButtonPressed>:
int KeyReg3[NUMBER_OF_BUTTON] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};

int TimeOutForKeyPress = 300;
int button_flag[NUMBER_OF_BUTTON] = {0, 0, 0};

int isButtonPressed(int index){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (button_flag[index] == 1){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		button_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	2000007c 	.word	0x2000007c

08000180 <subKeyProcess>:

void subKeyProcess(int index){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	//TODO
	button_flag[index] = 1;
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	2000007c 	.word	0x2000007c

080001a0 <getKeyInput>:

void getKeyInput(){
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUMBER_OF_BUTTON; i++){
 80001a6:	2300      	movs	r3, #0
 80001a8:	607b      	str	r3, [r7, #4]
 80001aa:	e06a      	b.n	8000282 <getKeyInput+0xe2>
		KeyReg0[i] = KeyReg1[i];
 80001ac:	4a39      	ldr	r2, [pc, #228]	; (8000294 <getKeyInput+0xf4>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b4:	4938      	ldr	r1, [pc, #224]	; (8000298 <getKeyInput+0xf8>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 80001bc:	4a37      	ldr	r2, [pc, #220]	; (800029c <getKeyInput+0xfc>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c4:	4933      	ldr	r1, [pc, #204]	; (8000294 <getKeyInput+0xf4>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg2[i] = HAL_GPIO_ReadPin(GPIOC, button_list[i]);
 80001cc:	4a34      	ldr	r2, [pc, #208]	; (80002a0 <getKeyInput+0x100>)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001d4:	b29b      	uxth	r3, r3
 80001d6:	4619      	mov	r1, r3
 80001d8:	4832      	ldr	r0, [pc, #200]	; (80002a4 <getKeyInput+0x104>)
 80001da:	f001 fa99 	bl	8001710 <HAL_GPIO_ReadPin>
 80001de:	4603      	mov	r3, r0
 80001e0:	4619      	mov	r1, r3
 80001e2:	4a2e      	ldr	r2, [pc, #184]	; (800029c <getKeyInput+0xfc>)
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 80001ea:	4a2a      	ldr	r2, [pc, #168]	; (8000294 <getKeyInput+0xf4>)
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f2:	4929      	ldr	r1, [pc, #164]	; (8000298 <getKeyInput+0xf8>)
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001fa:	429a      	cmp	r2, r3
 80001fc:	d13e      	bne.n	800027c <getKeyInput+0xdc>
 80001fe:	4a25      	ldr	r2, [pc, #148]	; (8000294 <getKeyInput+0xf4>)
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000206:	4925      	ldr	r1, [pc, #148]	; (800029c <getKeyInput+0xfc>)
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800020e:	429a      	cmp	r2, r3
 8000210:	d134      	bne.n	800027c <getKeyInput+0xdc>
			if (KeyReg2[i] != KeyReg3[i]){
 8000212:	4a22      	ldr	r2, [pc, #136]	; (800029c <getKeyInput+0xfc>)
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800021a:	4923      	ldr	r1, [pc, #140]	; (80002a8 <getKeyInput+0x108>)
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000222:	429a      	cmp	r2, r3
 8000224:	d015      	beq.n	8000252 <getKeyInput+0xb2>
			  KeyReg3[i] = KeyReg2[i];
 8000226:	4a1d      	ldr	r2, [pc, #116]	; (800029c <getKeyInput+0xfc>)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800022e:	491e      	ldr	r1, [pc, #120]	; (80002a8 <getKeyInput+0x108>)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

			  if (KeyReg3[i] == PRESSED_STATE){
 8000236:	4a1c      	ldr	r2, [pc, #112]	; (80002a8 <getKeyInput+0x108>)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800023e:	2b00      	cmp	r3, #0
 8000240:	d11c      	bne.n	800027c <getKeyInput+0xdc>
				TimeOutForKeyPress = 600;
 8000242:	4b1a      	ldr	r3, [pc, #104]	; (80002ac <getKeyInput+0x10c>)
 8000244:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000248:	601a      	str	r2, [r3, #0]
				subKeyProcess(i);
 800024a:	6878      	ldr	r0, [r7, #4]
 800024c:	f7ff ff98 	bl	8000180 <subKeyProcess>
 8000250:	e014      	b.n	800027c <getKeyInput+0xdc>
			  }
			}
			else {
			   TimeOutForKeyPress--;
 8000252:	4b16      	ldr	r3, [pc, #88]	; (80002ac <getKeyInput+0x10c>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	3b01      	subs	r3, #1
 8000258:	4a14      	ldr	r2, [pc, #80]	; (80002ac <getKeyInput+0x10c>)
 800025a:	6013      	str	r3, [r2, #0]
				if (TimeOutForKeyPress == 0){
 800025c:	4b13      	ldr	r3, [pc, #76]	; (80002ac <getKeyInput+0x10c>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	2b00      	cmp	r3, #0
 8000262:	d10b      	bne.n	800027c <getKeyInput+0xdc>
					if (KeyReg2[i] == PRESSED_STATE){
 8000264:	4a0d      	ldr	r2, [pc, #52]	; (800029c <getKeyInput+0xfc>)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800026c:	2b00      	cmp	r3, #0
 800026e:	d102      	bne.n	8000276 <getKeyInput+0xd6>
						subKeyProcess(i);
 8000270:	6878      	ldr	r0, [r7, #4]
 8000272:	f7ff ff85 	bl	8000180 <subKeyProcess>
					}
					TimeOutForKeyPress = 100;
 8000276:	4b0d      	ldr	r3, [pc, #52]	; (80002ac <getKeyInput+0x10c>)
 8000278:	2264      	movs	r2, #100	; 0x64
 800027a:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUMBER_OF_BUTTON; i++){
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	3301      	adds	r3, #1
 8000280:	607b      	str	r3, [r7, #4]
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	2b02      	cmp	r3, #2
 8000286:	dd91      	ble.n	80001ac <getKeyInput+0xc>
				}
			}
		}
	}
}
 8000288:	bf00      	nop
 800028a:	bf00      	nop
 800028c:	3708      	adds	r7, #8
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	20000018 	.word	0x20000018
 8000298:	2000000c 	.word	0x2000000c
 800029c:	20000024 	.word	0x20000024
 80002a0:	20000000 	.word	0x20000000
 80002a4:	40011000 	.word	0x40011000
 80002a8:	20000030 	.word	0x20000030
 80002ac:	2000003c 	.word	0x2000003c

080002b0 <fsm>:
 *      Author: FPTSHOP
 */

#include "fsm.h"

void fsm(){
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
	switch (status){
 80002b4:	4b9e      	ldr	r3, [pc, #632]	; (8000530 <fsm+0x280>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	3b03      	subs	r3, #3
 80002ba:	2b07      	cmp	r3, #7
 80002bc:	f200 82e7 	bhi.w	800088e <fsm+0x5de>
 80002c0:	a201      	add	r2, pc, #4	; (adr r2, 80002c8 <fsm+0x18>)
 80002c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002c6:	bf00      	nop
 80002c8:	080002e9 	.word	0x080002e9
 80002cc:	0800030b 	.word	0x0800030b
 80002d0:	080003c1 	.word	0x080003c1
 80002d4:	08000477 	.word	0x08000477
 80002d8:	08000559 	.word	0x08000559
 80002dc:	080005fd 	.word	0x080005fd
 80002e0:	080006d1 	.word	0x080006d1
 80002e4:	080007d9 	.word	0x080007d9
	case INIT:
		setTimer1(1000);
 80002e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002ec:	f000 fe06 	bl	8000efc <setTimer1>
		setTimer2(green_light_duration);
 80002f0:	4b90      	ldr	r3, [pc, #576]	; (8000534 <fsm+0x284>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4618      	mov	r0, r3
 80002f6:	f000 fe1b 	bl	8000f30 <setTimer2>
		led_counter = green_light_duration;
 80002fa:	4b8e      	ldr	r3, [pc, #568]	; (8000534 <fsm+0x284>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	4a8e      	ldr	r2, [pc, #568]	; (8000538 <fsm+0x288>)
 8000300:	6013      	str	r3, [r2, #0]
//		display7SEG(led_counter);
		status = NORTH_RED_EAST_GREEN;
 8000302:	4b8b      	ldr	r3, [pc, #556]	; (8000530 <fsm+0x280>)
 8000304:	2204      	movs	r2, #4
 8000306:	601a      	str	r2, [r3, #0]
		break;
 8000308:	e2d0      	b.n	80008ac <fsm+0x5fc>
	case NORTH_RED_EAST_GREEN:
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, RESET);
 800030a:	2200      	movs	r2, #0
 800030c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000310:	488a      	ldr	r0, [pc, #552]	; (800053c <fsm+0x28c>)
 8000312:	f001 fa14 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 8000316:	2201      	movs	r2, #1
 8000318:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800031c:	4887      	ldr	r0, [pc, #540]	; (800053c <fsm+0x28c>)
 800031e:	f001 fa0e 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 8000322:	2201      	movs	r2, #1
 8000324:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000328:	4884      	ldr	r0, [pc, #528]	; (800053c <fsm+0x28c>)
 800032a:	f001 fa08 	bl	800173e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, SET);
 800032e:	2201      	movs	r2, #1
 8000330:	2120      	movs	r1, #32
 8000332:	4882      	ldr	r0, [pc, #520]	; (800053c <fsm+0x28c>)
 8000334:	f001 fa03 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, SET);
 8000338:	2201      	movs	r2, #1
 800033a:	2140      	movs	r1, #64	; 0x40
 800033c:	487f      	ldr	r0, [pc, #508]	; (800053c <fsm+0x28c>)
 800033e:	f001 f9fe 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, RESET);
 8000342:	2200      	movs	r2, #0
 8000344:	2180      	movs	r1, #128	; 0x80
 8000346:	487d      	ldr	r0, [pc, #500]	; (800053c <fsm+0x28c>)
 8000348:	f001 f9f9 	bl	800173e <HAL_GPIO_WritePin>

		if (timer1_flag == 1){
 800034c:	4b7c      	ldr	r3, [pc, #496]	; (8000540 <fsm+0x290>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	2b01      	cmp	r3, #1
 8000352:	d109      	bne.n	8000368 <fsm+0xb8>
			led_counter -= 1000;
 8000354:	4b78      	ldr	r3, [pc, #480]	; (8000538 <fsm+0x288>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800035c:	4a76      	ldr	r2, [pc, #472]	; (8000538 <fsm+0x288>)
 800035e:	6013      	str	r3, [r2, #0]
//			display7SEG(led_counter);
			setTimer1(1000);
 8000360:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000364:	f000 fdca 	bl	8000efc <setTimer1>
		}

		if (isButtonPressed(MODE_BUTTON)){
 8000368:	2000      	movs	r0, #0
 800036a:	f7ff feef 	bl	800014c <isButtonPressed>
 800036e:	4603      	mov	r3, r0
 8000370:	2b00      	cmp	r3, #0
 8000372:	d013      	beq.n	800039c <fsm+0xec>
			status = MODIFY_RED;
 8000374:	4b6e      	ldr	r3, [pc, #440]	; (8000530 <fsm+0x280>)
 8000376:	2208      	movs	r2, #8
 8000378:	601a      	str	r2, [r3, #0]
			temp_red_duration = red_light_duration;
 800037a:	4b72      	ldr	r3, [pc, #456]	; (8000544 <fsm+0x294>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	4a72      	ldr	r2, [pc, #456]	; (8000548 <fsm+0x298>)
 8000380:	6013      	str	r3, [r2, #0]
			temp_green_duration = green_light_duration;
 8000382:	4b6c      	ldr	r3, [pc, #432]	; (8000534 <fsm+0x284>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	4a71      	ldr	r2, [pc, #452]	; (800054c <fsm+0x29c>)
 8000388:	6013      	str	r3, [r2, #0]
			led_counter = temp_red_duration;
 800038a:	4b6f      	ldr	r3, [pc, #444]	; (8000548 <fsm+0x298>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	4a6a      	ldr	r2, [pc, #424]	; (8000538 <fsm+0x288>)
 8000390:	6013      	str	r3, [r2, #0]
//			display7SEG(led_counter);
			resetAllLED();
 8000392:	f000 fc5d 	bl	8000c50 <resetAllLED>
			setTimer1(10);
 8000396:	200a      	movs	r0, #10
 8000398:	f000 fdb0 	bl	8000efc <setTimer1>
		}

		if (timer2_flag == 1){
 800039c:	4b6c      	ldr	r3, [pc, #432]	; (8000550 <fsm+0x2a0>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	2b01      	cmp	r3, #1
 80003a2:	f040 8276 	bne.w	8000892 <fsm+0x5e2>
			status = NORTH_RED_EAST_YELLOW;
 80003a6:	4b62      	ldr	r3, [pc, #392]	; (8000530 <fsm+0x280>)
 80003a8:	2205      	movs	r2, #5
 80003aa:	601a      	str	r2, [r3, #0]
			led_counter = yellow_light_duration;
 80003ac:	4b69      	ldr	r3, [pc, #420]	; (8000554 <fsm+0x2a4>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	4a61      	ldr	r2, [pc, #388]	; (8000538 <fsm+0x288>)
 80003b2:	6013      	str	r3, [r2, #0]
//			display7SEG(led_counter);
			setTimer2(yellow_light_duration);
 80003b4:	4b67      	ldr	r3, [pc, #412]	; (8000554 <fsm+0x2a4>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	4618      	mov	r0, r3
 80003ba:	f000 fdb9 	bl	8000f30 <setTimer2>
		}
		break;
 80003be:	e268      	b.n	8000892 <fsm+0x5e2>
	case NORTH_RED_EAST_YELLOW:
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, RESET);
 80003c0:	2200      	movs	r2, #0
 80003c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003c6:	485d      	ldr	r0, [pc, #372]	; (800053c <fsm+0x28c>)
 80003c8:	f001 f9b9 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 80003cc:	2201      	movs	r2, #1
 80003ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003d2:	485a      	ldr	r0, [pc, #360]	; (800053c <fsm+0x28c>)
 80003d4:	f001 f9b3 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 80003d8:	2201      	movs	r2, #1
 80003da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003de:	4857      	ldr	r0, [pc, #348]	; (800053c <fsm+0x28c>)
 80003e0:	f001 f9ad 	bl	800173e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, SET);
 80003e4:	2201      	movs	r2, #1
 80003e6:	2120      	movs	r1, #32
 80003e8:	4854      	ldr	r0, [pc, #336]	; (800053c <fsm+0x28c>)
 80003ea:	f001 f9a8 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, RESET);
 80003ee:	2200      	movs	r2, #0
 80003f0:	2140      	movs	r1, #64	; 0x40
 80003f2:	4852      	ldr	r0, [pc, #328]	; (800053c <fsm+0x28c>)
 80003f4:	f001 f9a3 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
 80003f8:	2201      	movs	r2, #1
 80003fa:	2180      	movs	r1, #128	; 0x80
 80003fc:	484f      	ldr	r0, [pc, #316]	; (800053c <fsm+0x28c>)
 80003fe:	f001 f99e 	bl	800173e <HAL_GPIO_WritePin>

		if (timer1_flag == 1){
 8000402:	4b4f      	ldr	r3, [pc, #316]	; (8000540 <fsm+0x290>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	2b01      	cmp	r3, #1
 8000408:	d109      	bne.n	800041e <fsm+0x16e>
			led_counter -= 1000;
 800040a:	4b4b      	ldr	r3, [pc, #300]	; (8000538 <fsm+0x288>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000412:	4a49      	ldr	r2, [pc, #292]	; (8000538 <fsm+0x288>)
 8000414:	6013      	str	r3, [r2, #0]
//			display7SEG(led_counter);
			setTimer1(1000);
 8000416:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800041a:	f000 fd6f 	bl	8000efc <setTimer1>
		}

		if (isButtonPressed(MODE_BUTTON)){
 800041e:	2000      	movs	r0, #0
 8000420:	f7ff fe94 	bl	800014c <isButtonPressed>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d013      	beq.n	8000452 <fsm+0x1a2>
			status = MODIFY_RED;
 800042a:	4b41      	ldr	r3, [pc, #260]	; (8000530 <fsm+0x280>)
 800042c:	2208      	movs	r2, #8
 800042e:	601a      	str	r2, [r3, #0]
			temp_red_duration = red_light_duration;
 8000430:	4b44      	ldr	r3, [pc, #272]	; (8000544 <fsm+0x294>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	4a44      	ldr	r2, [pc, #272]	; (8000548 <fsm+0x298>)
 8000436:	6013      	str	r3, [r2, #0]
			temp_green_duration = green_light_duration;
 8000438:	4b3e      	ldr	r3, [pc, #248]	; (8000534 <fsm+0x284>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a43      	ldr	r2, [pc, #268]	; (800054c <fsm+0x29c>)
 800043e:	6013      	str	r3, [r2, #0]
			led_counter = temp_red_duration;
 8000440:	4b41      	ldr	r3, [pc, #260]	; (8000548 <fsm+0x298>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	4a3c      	ldr	r2, [pc, #240]	; (8000538 <fsm+0x288>)
 8000446:	6013      	str	r3, [r2, #0]
//			display7SEG(led_counter);
			resetAllLED();
 8000448:	f000 fc02 	bl	8000c50 <resetAllLED>
			setTimer1(10);
 800044c:	200a      	movs	r0, #10
 800044e:	f000 fd55 	bl	8000efc <setTimer1>
		}

		if (timer2_flag == 1){
 8000452:	4b3f      	ldr	r3, [pc, #252]	; (8000550 <fsm+0x2a0>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	2b01      	cmp	r3, #1
 8000458:	f040 821d 	bne.w	8000896 <fsm+0x5e6>
			status = EAST_RED_NORTH_GREEN;
 800045c:	4b34      	ldr	r3, [pc, #208]	; (8000530 <fsm+0x280>)
 800045e:	2206      	movs	r2, #6
 8000460:	601a      	str	r2, [r3, #0]
			led_counter = red_light_duration;
 8000462:	4b38      	ldr	r3, [pc, #224]	; (8000544 <fsm+0x294>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	4a34      	ldr	r2, [pc, #208]	; (8000538 <fsm+0x288>)
 8000468:	6013      	str	r3, [r2, #0]
//			display7SEG(led_counter);
			setTimer2(green_light_duration);
 800046a:	4b32      	ldr	r3, [pc, #200]	; (8000534 <fsm+0x284>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	4618      	mov	r0, r3
 8000470:	f000 fd5e 	bl	8000f30 <setTimer2>
		}
		break;
 8000474:	e20f      	b.n	8000896 <fsm+0x5e6>
	case EAST_RED_NORTH_GREEN:
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
 8000476:	2201      	movs	r2, #1
 8000478:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800047c:	482f      	ldr	r0, [pc, #188]	; (800053c <fsm+0x28c>)
 800047e:	f001 f95e 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 8000482:	2201      	movs	r2, #1
 8000484:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000488:	482c      	ldr	r0, [pc, #176]	; (800053c <fsm+0x28c>)
 800048a:	f001 f958 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, RESET);
 800048e:	2200      	movs	r2, #0
 8000490:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000494:	4829      	ldr	r0, [pc, #164]	; (800053c <fsm+0x28c>)
 8000496:	f001 f952 	bl	800173e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, RESET);
 800049a:	2200      	movs	r2, #0
 800049c:	2120      	movs	r1, #32
 800049e:	4827      	ldr	r0, [pc, #156]	; (800053c <fsm+0x28c>)
 80004a0:	f001 f94d 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, SET);
 80004a4:	2201      	movs	r2, #1
 80004a6:	2140      	movs	r1, #64	; 0x40
 80004a8:	4824      	ldr	r0, [pc, #144]	; (800053c <fsm+0x28c>)
 80004aa:	f001 f948 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
 80004ae:	2201      	movs	r2, #1
 80004b0:	2180      	movs	r1, #128	; 0x80
 80004b2:	4822      	ldr	r0, [pc, #136]	; (800053c <fsm+0x28c>)
 80004b4:	f001 f943 	bl	800173e <HAL_GPIO_WritePin>

		if (timer1_flag == 1){
 80004b8:	4b21      	ldr	r3, [pc, #132]	; (8000540 <fsm+0x290>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	2b01      	cmp	r3, #1
 80004be:	d109      	bne.n	80004d4 <fsm+0x224>
			led_counter -= 1000;
 80004c0:	4b1d      	ldr	r3, [pc, #116]	; (8000538 <fsm+0x288>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80004c8:	4a1b      	ldr	r2, [pc, #108]	; (8000538 <fsm+0x288>)
 80004ca:	6013      	str	r3, [r2, #0]
//			display7SEG(led_counter);
			setTimer1(1000);
 80004cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004d0:	f000 fd14 	bl	8000efc <setTimer1>
		}

		if (isButtonPressed(MODE_BUTTON)){
 80004d4:	2000      	movs	r0, #0
 80004d6:	f7ff fe39 	bl	800014c <isButtonPressed>
 80004da:	4603      	mov	r3, r0
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d019      	beq.n	8000514 <fsm+0x264>
			status = MODIFY_RED;
 80004e0:	4b13      	ldr	r3, [pc, #76]	; (8000530 <fsm+0x280>)
 80004e2:	2208      	movs	r2, #8
 80004e4:	601a      	str	r2, [r3, #0]
			temp_red_duration = red_light_duration;
 80004e6:	4b17      	ldr	r3, [pc, #92]	; (8000544 <fsm+0x294>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	4a17      	ldr	r2, [pc, #92]	; (8000548 <fsm+0x298>)
 80004ec:	6013      	str	r3, [r2, #0]
			temp_green_duration = green_light_duration;
 80004ee:	4b11      	ldr	r3, [pc, #68]	; (8000534 <fsm+0x284>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4a16      	ldr	r2, [pc, #88]	; (800054c <fsm+0x29c>)
 80004f4:	6013      	str	r3, [r2, #0]
			led_counter = temp_red_duration;
 80004f6:	4b14      	ldr	r3, [pc, #80]	; (8000548 <fsm+0x298>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	4a0f      	ldr	r2, [pc, #60]	; (8000538 <fsm+0x288>)
 80004fc:	6013      	str	r3, [r2, #0]
			display7SEG(led_counter);
 80004fe:	4b0e      	ldr	r3, [pc, #56]	; (8000538 <fsm+0x288>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	b2db      	uxtb	r3, r3
 8000504:	4618      	mov	r0, r3
 8000506:	f000 f9e5 	bl	80008d4 <display7SEG>
			resetAllLED();
 800050a:	f000 fba1 	bl	8000c50 <resetAllLED>
			setTimer1(10);
 800050e:	200a      	movs	r0, #10
 8000510:	f000 fcf4 	bl	8000efc <setTimer1>
		}

		if (timer2_flag == 1){
 8000514:	4b0e      	ldr	r3, [pc, #56]	; (8000550 <fsm+0x2a0>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	2b01      	cmp	r3, #1
 800051a:	f040 81be 	bne.w	800089a <fsm+0x5ea>
			status = EAST_RED_NORTH_YELLOW;
 800051e:	4b04      	ldr	r3, [pc, #16]	; (8000530 <fsm+0x280>)
 8000520:	2207      	movs	r2, #7
 8000522:	601a      	str	r2, [r3, #0]
//			led_counter = red_light_duration;
			setTimer2(yellow_light_duration);
 8000524:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <fsm+0x2a4>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4618      	mov	r0, r3
 800052a:	f000 fd01 	bl	8000f30 <setTimer2>
		}
		break;
 800052e:	e1b4      	b.n	800089a <fsm+0x5ea>
 8000530:	2000004c 	.word	0x2000004c
 8000534:	20000048 	.word	0x20000048
 8000538:	20000094 	.word	0x20000094
 800053c:	40010800 	.word	0x40010800
 8000540:	200000e4 	.word	0x200000e4
 8000544:	20000040 	.word	0x20000040
 8000548:	20000088 	.word	0x20000088
 800054c:	20000090 	.word	0x20000090
 8000550:	200000ec 	.word	0x200000ec
 8000554:	20000044 	.word	0x20000044
	case EAST_RED_NORTH_YELLOW:
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
 8000558:	2201      	movs	r2, #1
 800055a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800055e:	4893      	ldr	r0, [pc, #588]	; (80007ac <fsm+0x4fc>)
 8000560:	f001 f8ed 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, RESET);
 8000564:	2200      	movs	r2, #0
 8000566:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800056a:	4890      	ldr	r0, [pc, #576]	; (80007ac <fsm+0x4fc>)
 800056c:	f001 f8e7 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 8000570:	2201      	movs	r2, #1
 8000572:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000576:	488d      	ldr	r0, [pc, #564]	; (80007ac <fsm+0x4fc>)
 8000578:	f001 f8e1 	bl	800173e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, RESET);
 800057c:	2200      	movs	r2, #0
 800057e:	2120      	movs	r1, #32
 8000580:	488a      	ldr	r0, [pc, #552]	; (80007ac <fsm+0x4fc>)
 8000582:	f001 f8dc 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, SET);
 8000586:	2201      	movs	r2, #1
 8000588:	2140      	movs	r1, #64	; 0x40
 800058a:	4888      	ldr	r0, [pc, #544]	; (80007ac <fsm+0x4fc>)
 800058c:	f001 f8d7 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
 8000590:	2201      	movs	r2, #1
 8000592:	2180      	movs	r1, #128	; 0x80
 8000594:	4885      	ldr	r0, [pc, #532]	; (80007ac <fsm+0x4fc>)
 8000596:	f001 f8d2 	bl	800173e <HAL_GPIO_WritePin>

		if (timer1_flag == 1){
 800059a:	4b85      	ldr	r3, [pc, #532]	; (80007b0 <fsm+0x500>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	2b01      	cmp	r3, #1
 80005a0:	d109      	bne.n	80005b6 <fsm+0x306>
			led_counter -= 1000;
 80005a2:	4b84      	ldr	r3, [pc, #528]	; (80007b4 <fsm+0x504>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80005aa:	4a82      	ldr	r2, [pc, #520]	; (80007b4 <fsm+0x504>)
 80005ac:	6013      	str	r3, [r2, #0]
//			display7SEG(led_counter);
			setTimer1(1000);
 80005ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005b2:	f000 fca3 	bl	8000efc <setTimer1>
		}

		if (isButtonPressed(MODE_BUTTON)){
 80005b6:	2000      	movs	r0, #0
 80005b8:	f7ff fdc8 	bl	800014c <isButtonPressed>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d013      	beq.n	80005ea <fsm+0x33a>
			status = MODIFY_RED;
 80005c2:	4b7d      	ldr	r3, [pc, #500]	; (80007b8 <fsm+0x508>)
 80005c4:	2208      	movs	r2, #8
 80005c6:	601a      	str	r2, [r3, #0]
			temp_red_duration = red_light_duration;
 80005c8:	4b7c      	ldr	r3, [pc, #496]	; (80007bc <fsm+0x50c>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a7c      	ldr	r2, [pc, #496]	; (80007c0 <fsm+0x510>)
 80005ce:	6013      	str	r3, [r2, #0]
			temp_green_duration = green_light_duration;
 80005d0:	4b7c      	ldr	r3, [pc, #496]	; (80007c4 <fsm+0x514>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a7c      	ldr	r2, [pc, #496]	; (80007c8 <fsm+0x518>)
 80005d6:	6013      	str	r3, [r2, #0]
			led_counter = temp_red_duration;
 80005d8:	4b79      	ldr	r3, [pc, #484]	; (80007c0 <fsm+0x510>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a75      	ldr	r2, [pc, #468]	; (80007b4 <fsm+0x504>)
 80005de:	6013      	str	r3, [r2, #0]
//			display7SEG(led_counter);
			resetAllLED();
 80005e0:	f000 fb36 	bl	8000c50 <resetAllLED>
			setTimer1(10);
 80005e4:	200a      	movs	r0, #10
 80005e6:	f000 fc89 	bl	8000efc <setTimer1>
		}

		if (timer2_flag == 1){
 80005ea:	4b78      	ldr	r3, [pc, #480]	; (80007cc <fsm+0x51c>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	2b01      	cmp	r3, #1
 80005f0:	f040 8155 	bne.w	800089e <fsm+0x5ee>
			status = INIT;
 80005f4:	4b70      	ldr	r3, [pc, #448]	; (80007b8 <fsm+0x508>)
 80005f6:	2203      	movs	r2, #3
 80005f8:	601a      	str	r2, [r3, #0]
		}
		break;
 80005fa:	e150      	b.n	800089e <fsm+0x5ee>
	case MODIFY_RED:
		//RED_LED blink
//		resetAllLED();
		if (timer1_flag == 1){
 80005fc:	4b6c      	ldr	r3, [pc, #432]	; (80007b0 <fsm+0x500>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	2b01      	cmp	r3, #1
 8000602:	d10c      	bne.n	800061e <fsm+0x36e>
			HAL_GPIO_TogglePin(GPIOA, LED_RED_1_Pin);
 8000604:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000608:	4868      	ldr	r0, [pc, #416]	; (80007ac <fsm+0x4fc>)
 800060a:	f001 f8b0 	bl	800176e <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOA, LED_RED_2_Pin);
 800060e:	2120      	movs	r1, #32
 8000610:	4866      	ldr	r0, [pc, #408]	; (80007ac <fsm+0x4fc>)
 8000612:	f001 f8ac 	bl	800176e <HAL_GPIO_TogglePin>

			setTimer1(500);
 8000616:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800061a:	f000 fc6f 	bl	8000efc <setTimer1>
		}

		if (isButtonPressed(INCREASE_BUTTON)){
 800061e:	2001      	movs	r0, #1
 8000620:	f7ff fd94 	bl	800014c <isButtonPressed>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d020      	beq.n	800066c <fsm+0x3bc>
			temp_red_duration += 1000;
 800062a:	4b65      	ldr	r3, [pc, #404]	; (80007c0 <fsm+0x510>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000632:	4a63      	ldr	r2, [pc, #396]	; (80007c0 <fsm+0x510>)
 8000634:	6013      	str	r3, [r2, #0]
			temp_green_duration += 1000;
 8000636:	4b64      	ldr	r3, [pc, #400]	; (80007c8 <fsm+0x518>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800063e:	4a62      	ldr	r2, [pc, #392]	; (80007c8 <fsm+0x518>)
 8000640:	6013      	str	r3, [r2, #0]
			if (temp_red_duration > 9000){
 8000642:	4b5f      	ldr	r3, [pc, #380]	; (80007c0 <fsm+0x510>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f242 3228 	movw	r2, #9000	; 0x2328
 800064a:	4293      	cmp	r3, r2
 800064c:	dd0a      	ble.n	8000664 <fsm+0x3b4>
				temp_red_duration = 9000;
 800064e:	4b5c      	ldr	r3, [pc, #368]	; (80007c0 <fsm+0x510>)
 8000650:	f242 3228 	movw	r2, #9000	; 0x2328
 8000654:	601a      	str	r2, [r3, #0]
				temp_green_duration = 9000 - yellow_light_duration;
 8000656:	4b5e      	ldr	r3, [pc, #376]	; (80007d0 <fsm+0x520>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	f5c3 530c 	rsb	r3, r3, #8960	; 0x2300
 800065e:	3328      	adds	r3, #40	; 0x28
 8000660:	4a59      	ldr	r2, [pc, #356]	; (80007c8 <fsm+0x518>)
 8000662:	6013      	str	r3, [r2, #0]
			}
			led_counter = temp_red_duration;
 8000664:	4b56      	ldr	r3, [pc, #344]	; (80007c0 <fsm+0x510>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a52      	ldr	r2, [pc, #328]	; (80007b4 <fsm+0x504>)
 800066a:	6013      	str	r3, [r2, #0]
//			display7SEG(led_counter);
		}

		if (isButtonPressed(MODE_BUTTON)){
 800066c:	2000      	movs	r0, #0
 800066e:	f7ff fd6d 	bl	800014c <isButtonPressed>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d01b      	beq.n	80006b0 <fsm+0x400>
			red_light_duration = temp_red_duration;
 8000678:	4b51      	ldr	r3, [pc, #324]	; (80007c0 <fsm+0x510>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a4f      	ldr	r2, [pc, #316]	; (80007bc <fsm+0x50c>)
 800067e:	6013      	str	r3, [r2, #0]
			green_light_duration = temp_green_duration;
 8000680:	4b51      	ldr	r3, [pc, #324]	; (80007c8 <fsm+0x518>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a4f      	ldr	r2, [pc, #316]	; (80007c4 <fsm+0x514>)
 8000686:	6013      	str	r3, [r2, #0]
			status = MODIFY_YELLOW;
 8000688:	4b4b      	ldr	r3, [pc, #300]	; (80007b8 <fsm+0x508>)
 800068a:	2209      	movs	r2, #9
 800068c:	601a      	str	r2, [r3, #0]
			resetAllLED();
 800068e:	f000 fadf 	bl	8000c50 <resetAllLED>
			temp_red_duration = red_light_duration;
 8000692:	4b4a      	ldr	r3, [pc, #296]	; (80007bc <fsm+0x50c>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	4a4a      	ldr	r2, [pc, #296]	; (80007c0 <fsm+0x510>)
 8000698:	6013      	str	r3, [r2, #0]
			temp_yellow_duration = yellow_light_duration;
 800069a:	4b4d      	ldr	r3, [pc, #308]	; (80007d0 <fsm+0x520>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4a4d      	ldr	r2, [pc, #308]	; (80007d4 <fsm+0x524>)
 80006a0:	6013      	str	r3, [r2, #0]
			led_counter = temp_yellow_duration;
 80006a2:	4b4c      	ldr	r3, [pc, #304]	; (80007d4 <fsm+0x524>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4a43      	ldr	r2, [pc, #268]	; (80007b4 <fsm+0x504>)
 80006a8:	6013      	str	r3, [r2, #0]
//			display7SEG(led_counter);
			setTimer1(10);
 80006aa:	200a      	movs	r0, #10
 80006ac:	f000 fc26 	bl	8000efc <setTimer1>
		}

		if (isButtonPressed(SET_VALUE_BUTTON)){
 80006b0:	2002      	movs	r0, #2
 80006b2:	f7ff fd4b 	bl	800014c <isButtonPressed>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	f000 80f2 	beq.w	80008a2 <fsm+0x5f2>
			red_light_duration = temp_red_duration;
 80006be:	4b40      	ldr	r3, [pc, #256]	; (80007c0 <fsm+0x510>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4a3e      	ldr	r2, [pc, #248]	; (80007bc <fsm+0x50c>)
 80006c4:	6013      	str	r3, [r2, #0]
			green_light_duration = temp_green_duration;
 80006c6:	4b40      	ldr	r3, [pc, #256]	; (80007c8 <fsm+0x518>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4a3e      	ldr	r2, [pc, #248]	; (80007c4 <fsm+0x514>)
 80006cc:	6013      	str	r3, [r2, #0]
		}
		break;
 80006ce:	e0e8      	b.n	80008a2 <fsm+0x5f2>
	case MODIFY_YELLOW:
//		resetAllLED();
		if (timer1_flag == 1){
 80006d0:	4b37      	ldr	r3, [pc, #220]	; (80007b0 <fsm+0x500>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	2b01      	cmp	r3, #1
 80006d6:	d10c      	bne.n	80006f2 <fsm+0x442>
			HAL_GPIO_TogglePin(GPIOA, LED_YELLOW_1_Pin);
 80006d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006dc:	4833      	ldr	r0, [pc, #204]	; (80007ac <fsm+0x4fc>)
 80006de:	f001 f846 	bl	800176e <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOA, LED_YELLOW_2_Pin);
 80006e2:	2140      	movs	r1, #64	; 0x40
 80006e4:	4831      	ldr	r0, [pc, #196]	; (80007ac <fsm+0x4fc>)
 80006e6:	f001 f842 	bl	800176e <HAL_GPIO_TogglePin>

			setTimer1(500);
 80006ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006ee:	f000 fc05 	bl	8000efc <setTimer1>
		}

		if (isButtonPressed(INCREASE_BUTTON)){
 80006f2:	2001      	movs	r0, #1
 80006f4:	f7ff fd2a 	bl	800014c <isButtonPressed>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d023      	beq.n	8000746 <fsm+0x496>
			temp_red_duration += 1000;
 80006fe:	4b30      	ldr	r3, [pc, #192]	; (80007c0 <fsm+0x510>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000706:	4a2e      	ldr	r2, [pc, #184]	; (80007c0 <fsm+0x510>)
 8000708:	6013      	str	r3, [r2, #0]
			temp_yellow_duration += 1000;
 800070a:	4b32      	ldr	r3, [pc, #200]	; (80007d4 <fsm+0x524>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000712:	4a30      	ldr	r2, [pc, #192]	; (80007d4 <fsm+0x524>)
 8000714:	6013      	str	r3, [r2, #0]
			if (temp_yellow_duration + green_light_duration > 9000){
 8000716:	4b2f      	ldr	r3, [pc, #188]	; (80007d4 <fsm+0x524>)
 8000718:	681a      	ldr	r2, [r3, #0]
 800071a:	4b2a      	ldr	r3, [pc, #168]	; (80007c4 <fsm+0x514>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4413      	add	r3, r2
 8000720:	f242 3228 	movw	r2, #9000	; 0x2328
 8000724:	4293      	cmp	r3, r2
 8000726:	dd0a      	ble.n	800073e <fsm+0x48e>
				temp_yellow_duration = 9000 - green_light_duration;
 8000728:	4b26      	ldr	r3, [pc, #152]	; (80007c4 <fsm+0x514>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f5c3 530c 	rsb	r3, r3, #8960	; 0x2300
 8000730:	3328      	adds	r3, #40	; 0x28
 8000732:	4a28      	ldr	r2, [pc, #160]	; (80007d4 <fsm+0x524>)
 8000734:	6013      	str	r3, [r2, #0]
				temp_red_duration = 9000;
 8000736:	4b22      	ldr	r3, [pc, #136]	; (80007c0 <fsm+0x510>)
 8000738:	f242 3228 	movw	r2, #9000	; 0x2328
 800073c:	601a      	str	r2, [r3, #0]
			}
			led_counter = temp_yellow_duration;
 800073e:	4b25      	ldr	r3, [pc, #148]	; (80007d4 <fsm+0x524>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4a1c      	ldr	r2, [pc, #112]	; (80007b4 <fsm+0x504>)
 8000744:	6013      	str	r3, [r2, #0]
//			display7SEG(led_counter);
		}

		if (isButtonPressed(MODE_BUTTON)){
 8000746:	2000      	movs	r0, #0
 8000748:	f7ff fd00 	bl	800014c <isButtonPressed>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d01b      	beq.n	800078a <fsm+0x4da>
			red_light_duration = temp_red_duration;
 8000752:	4b1b      	ldr	r3, [pc, #108]	; (80007c0 <fsm+0x510>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4a19      	ldr	r2, [pc, #100]	; (80007bc <fsm+0x50c>)
 8000758:	6013      	str	r3, [r2, #0]
			yellow_light_duration = temp_yellow_duration;
 800075a:	4b1e      	ldr	r3, [pc, #120]	; (80007d4 <fsm+0x524>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4a1c      	ldr	r2, [pc, #112]	; (80007d0 <fsm+0x520>)
 8000760:	6013      	str	r3, [r2, #0]
			status = MODIFY_GREEN;
 8000762:	4b15      	ldr	r3, [pc, #84]	; (80007b8 <fsm+0x508>)
 8000764:	220a      	movs	r2, #10
 8000766:	601a      	str	r2, [r3, #0]
			resetAllLED();
 8000768:	f000 fa72 	bl	8000c50 <resetAllLED>
			temp_red_duration = red_light_duration;
 800076c:	4b13      	ldr	r3, [pc, #76]	; (80007bc <fsm+0x50c>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a13      	ldr	r2, [pc, #76]	; (80007c0 <fsm+0x510>)
 8000772:	6013      	str	r3, [r2, #0]
			temp_green_duration = green_light_duration;
 8000774:	4b13      	ldr	r3, [pc, #76]	; (80007c4 <fsm+0x514>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a13      	ldr	r2, [pc, #76]	; (80007c8 <fsm+0x518>)
 800077a:	6013      	str	r3, [r2, #0]
			led_counter = temp_green_duration;
 800077c:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <fsm+0x518>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a0c      	ldr	r2, [pc, #48]	; (80007b4 <fsm+0x504>)
 8000782:	6013      	str	r3, [r2, #0]
//			display7SEG(led_counter);
			setTimer1(10);
 8000784:	200a      	movs	r0, #10
 8000786:	f000 fbb9 	bl	8000efc <setTimer1>
		}


		if (isButtonPressed(SET_VALUE_BUTTON)){
 800078a:	2002      	movs	r0, #2
 800078c:	f7ff fcde 	bl	800014c <isButtonPressed>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	f000 8087 	beq.w	80008a6 <fsm+0x5f6>
			red_light_duration = temp_red_duration;
 8000798:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <fsm+0x510>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a07      	ldr	r2, [pc, #28]	; (80007bc <fsm+0x50c>)
 800079e:	6013      	str	r3, [r2, #0]
			yellow_light_duration = temp_yellow_duration;
 80007a0:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <fsm+0x524>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a0a      	ldr	r2, [pc, #40]	; (80007d0 <fsm+0x520>)
 80007a6:	6013      	str	r3, [r2, #0]
		}
		break;
 80007a8:	e07d      	b.n	80008a6 <fsm+0x5f6>
 80007aa:	bf00      	nop
 80007ac:	40010800 	.word	0x40010800
 80007b0:	200000e4 	.word	0x200000e4
 80007b4:	20000094 	.word	0x20000094
 80007b8:	2000004c 	.word	0x2000004c
 80007bc:	20000040 	.word	0x20000040
 80007c0:	20000088 	.word	0x20000088
 80007c4:	20000048 	.word	0x20000048
 80007c8:	20000090 	.word	0x20000090
 80007cc:	200000ec 	.word	0x200000ec
 80007d0:	20000044 	.word	0x20000044
 80007d4:	2000008c 	.word	0x2000008c
	case MODIFY_GREEN:
//		resetAllLED();
		if (timer1_flag == 1){
 80007d8:	4b35      	ldr	r3, [pc, #212]	; (80008b0 <fsm+0x600>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2b01      	cmp	r3, #1
 80007de:	d10c      	bne.n	80007fa <fsm+0x54a>
			HAL_GPIO_TogglePin(GPIOA, LED_GREEN_1_Pin);
 80007e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007e4:	4833      	ldr	r0, [pc, #204]	; (80008b4 <fsm+0x604>)
 80007e6:	f000 ffc2 	bl	800176e <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOA, LED_GREEN_2_Pin);
 80007ea:	2180      	movs	r1, #128	; 0x80
 80007ec:	4831      	ldr	r0, [pc, #196]	; (80008b4 <fsm+0x604>)
 80007ee:	f000 ffbe 	bl	800176e <HAL_GPIO_TogglePin>

			setTimer1(500);
 80007f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007f6:	f000 fb81 	bl	8000efc <setTimer1>
		}

		if (isButtonPressed(INCREASE_BUTTON)){
 80007fa:	2001      	movs	r0, #1
 80007fc:	f7ff fca6 	bl	800014c <isButtonPressed>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d023      	beq.n	800084e <fsm+0x59e>
			temp_green_duration += 1000;
 8000806:	4b2c      	ldr	r3, [pc, #176]	; (80008b8 <fsm+0x608>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800080e:	4a2a      	ldr	r2, [pc, #168]	; (80008b8 <fsm+0x608>)
 8000810:	6013      	str	r3, [r2, #0]
			temp_red_duration += 1000;
 8000812:	4b2a      	ldr	r3, [pc, #168]	; (80008bc <fsm+0x60c>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800081a:	4a28      	ldr	r2, [pc, #160]	; (80008bc <fsm+0x60c>)
 800081c:	6013      	str	r3, [r2, #0]
			if (temp_green_duration + yellow_light_duration > 9000){
 800081e:	4b26      	ldr	r3, [pc, #152]	; (80008b8 <fsm+0x608>)
 8000820:	681a      	ldr	r2, [r3, #0]
 8000822:	4b27      	ldr	r3, [pc, #156]	; (80008c0 <fsm+0x610>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4413      	add	r3, r2
 8000828:	f242 3228 	movw	r2, #9000	; 0x2328
 800082c:	4293      	cmp	r3, r2
 800082e:	dd0a      	ble.n	8000846 <fsm+0x596>
				temp_green_duration = 9000 - yellow_light_duration;
 8000830:	4b23      	ldr	r3, [pc, #140]	; (80008c0 <fsm+0x610>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	f5c3 530c 	rsb	r3, r3, #8960	; 0x2300
 8000838:	3328      	adds	r3, #40	; 0x28
 800083a:	4a1f      	ldr	r2, [pc, #124]	; (80008b8 <fsm+0x608>)
 800083c:	6013      	str	r3, [r2, #0]
				temp_red_duration = 9000;
 800083e:	4b1f      	ldr	r3, [pc, #124]	; (80008bc <fsm+0x60c>)
 8000840:	f242 3228 	movw	r2, #9000	; 0x2328
 8000844:	601a      	str	r2, [r3, #0]
			}
			led_counter = temp_green_duration;
 8000846:	4b1c      	ldr	r3, [pc, #112]	; (80008b8 <fsm+0x608>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4a1e      	ldr	r2, [pc, #120]	; (80008c4 <fsm+0x614>)
 800084c:	6013      	str	r3, [r2, #0]
//			display7SEG(led_counter);
		}

		if (isButtonPressed(MODE_BUTTON)){
 800084e:	2000      	movs	r0, #0
 8000850:	f7ff fc7c 	bl	800014c <isButtonPressed>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d00a      	beq.n	8000870 <fsm+0x5c0>
			red_light_duration = temp_red_duration;
 800085a:	4b18      	ldr	r3, [pc, #96]	; (80008bc <fsm+0x60c>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4a1a      	ldr	r2, [pc, #104]	; (80008c8 <fsm+0x618>)
 8000860:	6013      	str	r3, [r2, #0]
			green_light_duration = temp_green_duration;
 8000862:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <fsm+0x608>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4a19      	ldr	r2, [pc, #100]	; (80008cc <fsm+0x61c>)
 8000868:	6013      	str	r3, [r2, #0]
			status = INIT;
 800086a:	4b19      	ldr	r3, [pc, #100]	; (80008d0 <fsm+0x620>)
 800086c:	2203      	movs	r2, #3
 800086e:	601a      	str	r2, [r3, #0]
		}

		if (isButtonPressed(SET_VALUE_BUTTON)){
 8000870:	2002      	movs	r0, #2
 8000872:	f7ff fc6b 	bl	800014c <isButtonPressed>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d016      	beq.n	80008aa <fsm+0x5fa>
			red_light_duration = temp_red_duration;
 800087c:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <fsm+0x60c>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a11      	ldr	r2, [pc, #68]	; (80008c8 <fsm+0x618>)
 8000882:	6013      	str	r3, [r2, #0]
			green_light_duration = temp_green_duration;
 8000884:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <fsm+0x608>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a10      	ldr	r2, [pc, #64]	; (80008cc <fsm+0x61c>)
 800088a:	6013      	str	r3, [r2, #0]
		}
		break;
 800088c:	e00d      	b.n	80008aa <fsm+0x5fa>
	default:
		break;
 800088e:	bf00      	nop
 8000890:	e00c      	b.n	80008ac <fsm+0x5fc>
		break;
 8000892:	bf00      	nop
 8000894:	e00a      	b.n	80008ac <fsm+0x5fc>
		break;
 8000896:	bf00      	nop
 8000898:	e008      	b.n	80008ac <fsm+0x5fc>
		break;
 800089a:	bf00      	nop
 800089c:	e006      	b.n	80008ac <fsm+0x5fc>
		break;
 800089e:	bf00      	nop
 80008a0:	e004      	b.n	80008ac <fsm+0x5fc>
		break;
 80008a2:	bf00      	nop
 80008a4:	e002      	b.n	80008ac <fsm+0x5fc>
		break;
 80008a6:	bf00      	nop
 80008a8:	e000      	b.n	80008ac <fsm+0x5fc>
		break;
 80008aa:	bf00      	nop
	}
}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	200000e4 	.word	0x200000e4
 80008b4:	40010800 	.word	0x40010800
 80008b8:	20000090 	.word	0x20000090
 80008bc:	20000088 	.word	0x20000088
 80008c0:	20000044 	.word	0x20000044
 80008c4:	20000094 	.word	0x20000094
 80008c8:	20000040 	.word	0x20000040
 80008cc:	20000048 	.word	0x20000048
 80008d0:	2000004c 	.word	0x2000004c

080008d4 <display7SEG>:
int yellow_light_counter = 0;

int status = INIT;
int led_counter = 0;

void display7SEG(uint8_t number){
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	71fb      	strb	r3, [r7, #7]
	switch (number){
 80008de:	79fb      	ldrb	r3, [r7, #7]
 80008e0:	2b09      	cmp	r3, #9
 80008e2:	f200 8189 	bhi.w	8000bf8 <display7SEG+0x324>
 80008e6:	a201      	add	r2, pc, #4	; (adr r2, 80008ec <display7SEG+0x18>)
 80008e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008ec:	08000915 	.word	0x08000915
 80008f0:	0800095f 	.word	0x0800095f
 80008f4:	080009a9 	.word	0x080009a9
 80008f8:	080009f3 	.word	0x080009f3
 80008fc:	08000a3d 	.word	0x08000a3d
 8000900:	08000a87 	.word	0x08000a87
 8000904:	08000ad1 	.word	0x08000ad1
 8000908:	08000b1b 	.word	0x08000b1b
 800090c:	08000b65 	.word	0x08000b65
 8000910:	08000baf 	.word	0x08000baf
	case 0:
		HAL_GPIO_WritePin(GPIOB, SEG0_Pin, RESET);
 8000914:	2200      	movs	r2, #0
 8000916:	2102      	movs	r1, #2
 8000918:	48cc      	ldr	r0, [pc, #816]	; (8000c4c <display7SEG+0x378>)
 800091a:	f000 ff10 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG1_Pin, RESET);
 800091e:	2200      	movs	r2, #0
 8000920:	2104      	movs	r1, #4
 8000922:	48ca      	ldr	r0, [pc, #808]	; (8000c4c <display7SEG+0x378>)
 8000924:	f000 ff0b 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG2_Pin, RESET);
 8000928:	2200      	movs	r2, #0
 800092a:	2108      	movs	r1, #8
 800092c:	48c7      	ldr	r0, [pc, #796]	; (8000c4c <display7SEG+0x378>)
 800092e:	f000 ff06 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG3_Pin, RESET);
 8000932:	2200      	movs	r2, #0
 8000934:	2110      	movs	r1, #16
 8000936:	48c5      	ldr	r0, [pc, #788]	; (8000c4c <display7SEG+0x378>)
 8000938:	f000 ff01 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG4_Pin, RESET);
 800093c:	2200      	movs	r2, #0
 800093e:	2120      	movs	r1, #32
 8000940:	48c2      	ldr	r0, [pc, #776]	; (8000c4c <display7SEG+0x378>)
 8000942:	f000 fefc 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG5_Pin, RESET);
 8000946:	2200      	movs	r2, #0
 8000948:	2140      	movs	r1, #64	; 0x40
 800094a:	48c0      	ldr	r0, [pc, #768]	; (8000c4c <display7SEG+0x378>)
 800094c:	f000 fef7 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG6_Pin, SET);
 8000950:	2201      	movs	r2, #1
 8000952:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000956:	48bd      	ldr	r0, [pc, #756]	; (8000c4c <display7SEG+0x378>)
 8000958:	f000 fef1 	bl	800173e <HAL_GPIO_WritePin>
		break;
 800095c:	e171      	b.n	8000c42 <display7SEG+0x36e>
	case 1:
		HAL_GPIO_WritePin(GPIOB, SEG0_Pin, SET);
 800095e:	2201      	movs	r2, #1
 8000960:	2102      	movs	r1, #2
 8000962:	48ba      	ldr	r0, [pc, #744]	; (8000c4c <display7SEG+0x378>)
 8000964:	f000 feeb 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG1_Pin, RESET);
 8000968:	2200      	movs	r2, #0
 800096a:	2104      	movs	r1, #4
 800096c:	48b7      	ldr	r0, [pc, #732]	; (8000c4c <display7SEG+0x378>)
 800096e:	f000 fee6 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG2_Pin, RESET);
 8000972:	2200      	movs	r2, #0
 8000974:	2108      	movs	r1, #8
 8000976:	48b5      	ldr	r0, [pc, #724]	; (8000c4c <display7SEG+0x378>)
 8000978:	f000 fee1 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG3_Pin, SET);
 800097c:	2201      	movs	r2, #1
 800097e:	2110      	movs	r1, #16
 8000980:	48b2      	ldr	r0, [pc, #712]	; (8000c4c <display7SEG+0x378>)
 8000982:	f000 fedc 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG4_Pin, SET);
 8000986:	2201      	movs	r2, #1
 8000988:	2120      	movs	r1, #32
 800098a:	48b0      	ldr	r0, [pc, #704]	; (8000c4c <display7SEG+0x378>)
 800098c:	f000 fed7 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG5_Pin, SET);
 8000990:	2201      	movs	r2, #1
 8000992:	2140      	movs	r1, #64	; 0x40
 8000994:	48ad      	ldr	r0, [pc, #692]	; (8000c4c <display7SEG+0x378>)
 8000996:	f000 fed2 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG6_Pin, SET);
 800099a:	2201      	movs	r2, #1
 800099c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009a0:	48aa      	ldr	r0, [pc, #680]	; (8000c4c <display7SEG+0x378>)
 80009a2:	f000 fecc 	bl	800173e <HAL_GPIO_WritePin>
		break;
 80009a6:	e14c      	b.n	8000c42 <display7SEG+0x36e>
	case 2:
		HAL_GPIO_WritePin(GPIOB, SEG0_Pin, RESET);
 80009a8:	2200      	movs	r2, #0
 80009aa:	2102      	movs	r1, #2
 80009ac:	48a7      	ldr	r0, [pc, #668]	; (8000c4c <display7SEG+0x378>)
 80009ae:	f000 fec6 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG1_Pin, RESET);
 80009b2:	2200      	movs	r2, #0
 80009b4:	2104      	movs	r1, #4
 80009b6:	48a5      	ldr	r0, [pc, #660]	; (8000c4c <display7SEG+0x378>)
 80009b8:	f000 fec1 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG2_Pin, SET);
 80009bc:	2201      	movs	r2, #1
 80009be:	2108      	movs	r1, #8
 80009c0:	48a2      	ldr	r0, [pc, #648]	; (8000c4c <display7SEG+0x378>)
 80009c2:	f000 febc 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG3_Pin, RESET);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2110      	movs	r1, #16
 80009ca:	48a0      	ldr	r0, [pc, #640]	; (8000c4c <display7SEG+0x378>)
 80009cc:	f000 feb7 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG4_Pin, RESET);
 80009d0:	2200      	movs	r2, #0
 80009d2:	2120      	movs	r1, #32
 80009d4:	489d      	ldr	r0, [pc, #628]	; (8000c4c <display7SEG+0x378>)
 80009d6:	f000 feb2 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG5_Pin, SET);
 80009da:	2201      	movs	r2, #1
 80009dc:	2140      	movs	r1, #64	; 0x40
 80009de:	489b      	ldr	r0, [pc, #620]	; (8000c4c <display7SEG+0x378>)
 80009e0:	f000 fead 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG6_Pin, RESET);
 80009e4:	2200      	movs	r2, #0
 80009e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009ea:	4898      	ldr	r0, [pc, #608]	; (8000c4c <display7SEG+0x378>)
 80009ec:	f000 fea7 	bl	800173e <HAL_GPIO_WritePin>
		break;
 80009f0:	e127      	b.n	8000c42 <display7SEG+0x36e>
	case 3:
		HAL_GPIO_WritePin(GPIOB, SEG0_Pin, RESET);
 80009f2:	2200      	movs	r2, #0
 80009f4:	2102      	movs	r1, #2
 80009f6:	4895      	ldr	r0, [pc, #596]	; (8000c4c <display7SEG+0x378>)
 80009f8:	f000 fea1 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG1_Pin, RESET);
 80009fc:	2200      	movs	r2, #0
 80009fe:	2104      	movs	r1, #4
 8000a00:	4892      	ldr	r0, [pc, #584]	; (8000c4c <display7SEG+0x378>)
 8000a02:	f000 fe9c 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG2_Pin, RESET);
 8000a06:	2200      	movs	r2, #0
 8000a08:	2108      	movs	r1, #8
 8000a0a:	4890      	ldr	r0, [pc, #576]	; (8000c4c <display7SEG+0x378>)
 8000a0c:	f000 fe97 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG3_Pin, RESET);
 8000a10:	2200      	movs	r2, #0
 8000a12:	2110      	movs	r1, #16
 8000a14:	488d      	ldr	r0, [pc, #564]	; (8000c4c <display7SEG+0x378>)
 8000a16:	f000 fe92 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG4_Pin, SET);
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	2120      	movs	r1, #32
 8000a1e:	488b      	ldr	r0, [pc, #556]	; (8000c4c <display7SEG+0x378>)
 8000a20:	f000 fe8d 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG5_Pin, SET);
 8000a24:	2201      	movs	r2, #1
 8000a26:	2140      	movs	r1, #64	; 0x40
 8000a28:	4888      	ldr	r0, [pc, #544]	; (8000c4c <display7SEG+0x378>)
 8000a2a:	f000 fe88 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG6_Pin, RESET);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a34:	4885      	ldr	r0, [pc, #532]	; (8000c4c <display7SEG+0x378>)
 8000a36:	f000 fe82 	bl	800173e <HAL_GPIO_WritePin>
		break;
 8000a3a:	e102      	b.n	8000c42 <display7SEG+0x36e>
	case 4:
		HAL_GPIO_WritePin(GPIOB, SEG0_Pin, SET);
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	2102      	movs	r1, #2
 8000a40:	4882      	ldr	r0, [pc, #520]	; (8000c4c <display7SEG+0x378>)
 8000a42:	f000 fe7c 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG1_Pin, RESET);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2104      	movs	r1, #4
 8000a4a:	4880      	ldr	r0, [pc, #512]	; (8000c4c <display7SEG+0x378>)
 8000a4c:	f000 fe77 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG2_Pin, RESET);
 8000a50:	2200      	movs	r2, #0
 8000a52:	2108      	movs	r1, #8
 8000a54:	487d      	ldr	r0, [pc, #500]	; (8000c4c <display7SEG+0x378>)
 8000a56:	f000 fe72 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG3_Pin, SET);
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	2110      	movs	r1, #16
 8000a5e:	487b      	ldr	r0, [pc, #492]	; (8000c4c <display7SEG+0x378>)
 8000a60:	f000 fe6d 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG4_Pin, SET);
 8000a64:	2201      	movs	r2, #1
 8000a66:	2120      	movs	r1, #32
 8000a68:	4878      	ldr	r0, [pc, #480]	; (8000c4c <display7SEG+0x378>)
 8000a6a:	f000 fe68 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG5_Pin, RESET);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	2140      	movs	r1, #64	; 0x40
 8000a72:	4876      	ldr	r0, [pc, #472]	; (8000c4c <display7SEG+0x378>)
 8000a74:	f000 fe63 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG6_Pin, RESET);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a7e:	4873      	ldr	r0, [pc, #460]	; (8000c4c <display7SEG+0x378>)
 8000a80:	f000 fe5d 	bl	800173e <HAL_GPIO_WritePin>
		break;
 8000a84:	e0dd      	b.n	8000c42 <display7SEG+0x36e>
	case 5:
		HAL_GPIO_WritePin(GPIOB, SEG0_Pin, RESET);
 8000a86:	2200      	movs	r2, #0
 8000a88:	2102      	movs	r1, #2
 8000a8a:	4870      	ldr	r0, [pc, #448]	; (8000c4c <display7SEG+0x378>)
 8000a8c:	f000 fe57 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG1_Pin, SET);
 8000a90:	2201      	movs	r2, #1
 8000a92:	2104      	movs	r1, #4
 8000a94:	486d      	ldr	r0, [pc, #436]	; (8000c4c <display7SEG+0x378>)
 8000a96:	f000 fe52 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG2_Pin, RESET);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2108      	movs	r1, #8
 8000a9e:	486b      	ldr	r0, [pc, #428]	; (8000c4c <display7SEG+0x378>)
 8000aa0:	f000 fe4d 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG3_Pin, RESET);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2110      	movs	r1, #16
 8000aa8:	4868      	ldr	r0, [pc, #416]	; (8000c4c <display7SEG+0x378>)
 8000aaa:	f000 fe48 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG4_Pin, SET);
 8000aae:	2201      	movs	r2, #1
 8000ab0:	2120      	movs	r1, #32
 8000ab2:	4866      	ldr	r0, [pc, #408]	; (8000c4c <display7SEG+0x378>)
 8000ab4:	f000 fe43 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG5_Pin, RESET);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2140      	movs	r1, #64	; 0x40
 8000abc:	4863      	ldr	r0, [pc, #396]	; (8000c4c <display7SEG+0x378>)
 8000abe:	f000 fe3e 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG6_Pin, RESET);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ac8:	4860      	ldr	r0, [pc, #384]	; (8000c4c <display7SEG+0x378>)
 8000aca:	f000 fe38 	bl	800173e <HAL_GPIO_WritePin>
		break;
 8000ace:	e0b8      	b.n	8000c42 <display7SEG+0x36e>
	case 6:
		HAL_GPIO_WritePin(GPIOB, SEG0_Pin, RESET);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	2102      	movs	r1, #2
 8000ad4:	485d      	ldr	r0, [pc, #372]	; (8000c4c <display7SEG+0x378>)
 8000ad6:	f000 fe32 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG1_Pin, SET);
 8000ada:	2201      	movs	r2, #1
 8000adc:	2104      	movs	r1, #4
 8000ade:	485b      	ldr	r0, [pc, #364]	; (8000c4c <display7SEG+0x378>)
 8000ae0:	f000 fe2d 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG2_Pin, RESET);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	2108      	movs	r1, #8
 8000ae8:	4858      	ldr	r0, [pc, #352]	; (8000c4c <display7SEG+0x378>)
 8000aea:	f000 fe28 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG3_Pin, RESET);
 8000aee:	2200      	movs	r2, #0
 8000af0:	2110      	movs	r1, #16
 8000af2:	4856      	ldr	r0, [pc, #344]	; (8000c4c <display7SEG+0x378>)
 8000af4:	f000 fe23 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG4_Pin, RESET);
 8000af8:	2200      	movs	r2, #0
 8000afa:	2120      	movs	r1, #32
 8000afc:	4853      	ldr	r0, [pc, #332]	; (8000c4c <display7SEG+0x378>)
 8000afe:	f000 fe1e 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG5_Pin, RESET);
 8000b02:	2200      	movs	r2, #0
 8000b04:	2140      	movs	r1, #64	; 0x40
 8000b06:	4851      	ldr	r0, [pc, #324]	; (8000c4c <display7SEG+0x378>)
 8000b08:	f000 fe19 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG6_Pin, RESET);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b12:	484e      	ldr	r0, [pc, #312]	; (8000c4c <display7SEG+0x378>)
 8000b14:	f000 fe13 	bl	800173e <HAL_GPIO_WritePin>
		break;
 8000b18:	e093      	b.n	8000c42 <display7SEG+0x36e>
	case 7:
		HAL_GPIO_WritePin(GPIOB, SEG0_Pin, RESET);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2102      	movs	r1, #2
 8000b1e:	484b      	ldr	r0, [pc, #300]	; (8000c4c <display7SEG+0x378>)
 8000b20:	f000 fe0d 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG1_Pin, RESET);
 8000b24:	2200      	movs	r2, #0
 8000b26:	2104      	movs	r1, #4
 8000b28:	4848      	ldr	r0, [pc, #288]	; (8000c4c <display7SEG+0x378>)
 8000b2a:	f000 fe08 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG2_Pin, RESET);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2108      	movs	r1, #8
 8000b32:	4846      	ldr	r0, [pc, #280]	; (8000c4c <display7SEG+0x378>)
 8000b34:	f000 fe03 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG3_Pin, SET);
 8000b38:	2201      	movs	r2, #1
 8000b3a:	2110      	movs	r1, #16
 8000b3c:	4843      	ldr	r0, [pc, #268]	; (8000c4c <display7SEG+0x378>)
 8000b3e:	f000 fdfe 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG4_Pin, SET);
 8000b42:	2201      	movs	r2, #1
 8000b44:	2120      	movs	r1, #32
 8000b46:	4841      	ldr	r0, [pc, #260]	; (8000c4c <display7SEG+0x378>)
 8000b48:	f000 fdf9 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG5_Pin, SET);
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	2140      	movs	r1, #64	; 0x40
 8000b50:	483e      	ldr	r0, [pc, #248]	; (8000c4c <display7SEG+0x378>)
 8000b52:	f000 fdf4 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG6_Pin, SET);
 8000b56:	2201      	movs	r2, #1
 8000b58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b5c:	483b      	ldr	r0, [pc, #236]	; (8000c4c <display7SEG+0x378>)
 8000b5e:	f000 fdee 	bl	800173e <HAL_GPIO_WritePin>
		break;
 8000b62:	e06e      	b.n	8000c42 <display7SEG+0x36e>
	case 8:
		HAL_GPIO_WritePin(GPIOB, SEG0_Pin, RESET);
 8000b64:	2200      	movs	r2, #0
 8000b66:	2102      	movs	r1, #2
 8000b68:	4838      	ldr	r0, [pc, #224]	; (8000c4c <display7SEG+0x378>)
 8000b6a:	f000 fde8 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG1_Pin, RESET);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2104      	movs	r1, #4
 8000b72:	4836      	ldr	r0, [pc, #216]	; (8000c4c <display7SEG+0x378>)
 8000b74:	f000 fde3 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG2_Pin, RESET);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2108      	movs	r1, #8
 8000b7c:	4833      	ldr	r0, [pc, #204]	; (8000c4c <display7SEG+0x378>)
 8000b7e:	f000 fdde 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG3_Pin, RESET);
 8000b82:	2200      	movs	r2, #0
 8000b84:	2110      	movs	r1, #16
 8000b86:	4831      	ldr	r0, [pc, #196]	; (8000c4c <display7SEG+0x378>)
 8000b88:	f000 fdd9 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG4_Pin, RESET);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2120      	movs	r1, #32
 8000b90:	482e      	ldr	r0, [pc, #184]	; (8000c4c <display7SEG+0x378>)
 8000b92:	f000 fdd4 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG5_Pin, RESET);
 8000b96:	2200      	movs	r2, #0
 8000b98:	2140      	movs	r1, #64	; 0x40
 8000b9a:	482c      	ldr	r0, [pc, #176]	; (8000c4c <display7SEG+0x378>)
 8000b9c:	f000 fdcf 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG6_Pin, RESET);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ba6:	4829      	ldr	r0, [pc, #164]	; (8000c4c <display7SEG+0x378>)
 8000ba8:	f000 fdc9 	bl	800173e <HAL_GPIO_WritePin>
		break;
 8000bac:	e049      	b.n	8000c42 <display7SEG+0x36e>
	case 9:
		HAL_GPIO_WritePin(GPIOB, SEG0_Pin, RESET);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2102      	movs	r1, #2
 8000bb2:	4826      	ldr	r0, [pc, #152]	; (8000c4c <display7SEG+0x378>)
 8000bb4:	f000 fdc3 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG1_Pin, RESET);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2104      	movs	r1, #4
 8000bbc:	4823      	ldr	r0, [pc, #140]	; (8000c4c <display7SEG+0x378>)
 8000bbe:	f000 fdbe 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG2_Pin, RESET);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2108      	movs	r1, #8
 8000bc6:	4821      	ldr	r0, [pc, #132]	; (8000c4c <display7SEG+0x378>)
 8000bc8:	f000 fdb9 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG3_Pin, RESET);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	2110      	movs	r1, #16
 8000bd0:	481e      	ldr	r0, [pc, #120]	; (8000c4c <display7SEG+0x378>)
 8000bd2:	f000 fdb4 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG4_Pin, SET);
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	2120      	movs	r1, #32
 8000bda:	481c      	ldr	r0, [pc, #112]	; (8000c4c <display7SEG+0x378>)
 8000bdc:	f000 fdaf 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG5_Pin, RESET);
 8000be0:	2200      	movs	r2, #0
 8000be2:	2140      	movs	r1, #64	; 0x40
 8000be4:	4819      	ldr	r0, [pc, #100]	; (8000c4c <display7SEG+0x378>)
 8000be6:	f000 fdaa 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG6_Pin, RESET);
 8000bea:	2200      	movs	r2, #0
 8000bec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bf0:	4816      	ldr	r0, [pc, #88]	; (8000c4c <display7SEG+0x378>)
 8000bf2:	f000 fda4 	bl	800173e <HAL_GPIO_WritePin>
		break;
 8000bf6:	e024      	b.n	8000c42 <display7SEG+0x36e>
	default:
		HAL_GPIO_WritePin(GPIOB, SEG0_Pin, SET);
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	2102      	movs	r1, #2
 8000bfc:	4813      	ldr	r0, [pc, #76]	; (8000c4c <display7SEG+0x378>)
 8000bfe:	f000 fd9e 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG1_Pin, SET);
 8000c02:	2201      	movs	r2, #1
 8000c04:	2104      	movs	r1, #4
 8000c06:	4811      	ldr	r0, [pc, #68]	; (8000c4c <display7SEG+0x378>)
 8000c08:	f000 fd99 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG2_Pin, SET);
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	2108      	movs	r1, #8
 8000c10:	480e      	ldr	r0, [pc, #56]	; (8000c4c <display7SEG+0x378>)
 8000c12:	f000 fd94 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG3_Pin, SET);
 8000c16:	2201      	movs	r2, #1
 8000c18:	2110      	movs	r1, #16
 8000c1a:	480c      	ldr	r0, [pc, #48]	; (8000c4c <display7SEG+0x378>)
 8000c1c:	f000 fd8f 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG4_Pin, SET);
 8000c20:	2201      	movs	r2, #1
 8000c22:	2120      	movs	r1, #32
 8000c24:	4809      	ldr	r0, [pc, #36]	; (8000c4c <display7SEG+0x378>)
 8000c26:	f000 fd8a 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG5_Pin, SET);
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	2140      	movs	r1, #64	; 0x40
 8000c2e:	4807      	ldr	r0, [pc, #28]	; (8000c4c <display7SEG+0x378>)
 8000c30:	f000 fd85 	bl	800173e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG6_Pin, SET);
 8000c34:	2201      	movs	r2, #1
 8000c36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c3a:	4804      	ldr	r0, [pc, #16]	; (8000c4c <display7SEG+0x378>)
 8000c3c:	f000 fd7f 	bl	800173e <HAL_GPIO_WritePin>
		break;
 8000c40:	bf00      	nop
	}
}
 8000c42:	bf00      	nop
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40010c00 	.word	0x40010c00

08000c50 <resetAllLED>:

void resetAllLED(){
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, LED_RED_1_Pin, SET);
 8000c54:	2201      	movs	r2, #1
 8000c56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c5a:	4810      	ldr	r0, [pc, #64]	; (8000c9c <resetAllLED+0x4c>)
 8000c5c:	f000 fd6f 	bl	800173e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_GREEN_1_Pin, SET);
 8000c60:	2201      	movs	r2, #1
 8000c62:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c66:	480d      	ldr	r0, [pc, #52]	; (8000c9c <resetAllLED+0x4c>)
 8000c68:	f000 fd69 	bl	800173e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_YELLOW_1_Pin, SET);
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c72:	480a      	ldr	r0, [pc, #40]	; (8000c9c <resetAllLED+0x4c>)
 8000c74:	f000 fd63 	bl	800173e <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, LED_RED_2_Pin, SET);
 8000c78:	2201      	movs	r2, #1
 8000c7a:	2120      	movs	r1, #32
 8000c7c:	4807      	ldr	r0, [pc, #28]	; (8000c9c <resetAllLED+0x4c>)
 8000c7e:	f000 fd5e 	bl	800173e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_GREEN_2_Pin, SET);
 8000c82:	2201      	movs	r2, #1
 8000c84:	2180      	movs	r1, #128	; 0x80
 8000c86:	4805      	ldr	r0, [pc, #20]	; (8000c9c <resetAllLED+0x4c>)
 8000c88:	f000 fd59 	bl	800173e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_YELLOW_2_Pin, SET);
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	2140      	movs	r1, #64	; 0x40
 8000c90:	4802      	ldr	r0, [pc, #8]	; (8000c9c <resetAllLED+0x4c>)
 8000c92:	f000 fd54 	bl	800173e <HAL_GPIO_WritePin>
}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40010800 	.word	0x40010800

08000ca0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ca4:	f000 fa40 	bl	8001128 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ca8:	f000 f81c 	bl	8000ce4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cac:	f000 f8a2 	bl	8000df4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000cb0:	f000 f854 	bl	8000d5c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000cb4:	4808      	ldr	r0, [pc, #32]	; (8000cd8 <main+0x38>)
 8000cb6:	f001 f9ab 	bl	8002010 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  display7SEG(led_counter / 1000);
 8000cba:	4b08      	ldr	r3, [pc, #32]	; (8000cdc <main+0x3c>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a08      	ldr	r2, [pc, #32]	; (8000ce0 <main+0x40>)
 8000cc0:	fb82 1203 	smull	r1, r2, r2, r3
 8000cc4:	1192      	asrs	r2, r2, #6
 8000cc6:	17db      	asrs	r3, r3, #31
 8000cc8:	1ad3      	subs	r3, r2, r3
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff fe01 	bl	80008d4 <display7SEG>
	  fsm();
 8000cd2:	f7ff faed 	bl	80002b0 <fsm>
	  display7SEG(led_counter / 1000);
 8000cd6:	e7f0      	b.n	8000cba <main+0x1a>
 8000cd8:	20000098 	.word	0x20000098
 8000cdc:	20000094 	.word	0x20000094
 8000ce0:	10624dd3 	.word	0x10624dd3

08000ce4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b090      	sub	sp, #64	; 0x40
 8000ce8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cea:	f107 0318 	add.w	r3, r7, #24
 8000cee:	2228      	movs	r2, #40	; 0x28
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f001 fd5a 	bl	80027ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cf8:	1d3b      	adds	r3, r7, #4
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]
 8000d00:	609a      	str	r2, [r3, #8]
 8000d02:	60da      	str	r2, [r3, #12]
 8000d04:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d06:	2302      	movs	r3, #2
 8000d08:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d0e:	2310      	movs	r3, #16
 8000d10:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d12:	2300      	movs	r3, #0
 8000d14:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d16:	f107 0318 	add.w	r3, r7, #24
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f000 fd40 	bl	80017a0 <HAL_RCC_OscConfig>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000d26:	f000 f8e3 	bl	8000ef0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d2a:	230f      	movs	r3, #15
 8000d2c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d32:	2300      	movs	r3, #0
 8000d34:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d36:	2300      	movs	r3, #0
 8000d38:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d3e:	1d3b      	adds	r3, r7, #4
 8000d40:	2100      	movs	r1, #0
 8000d42:	4618      	mov	r0, r3
 8000d44:	f000 ffae 	bl	8001ca4 <HAL_RCC_ClockConfig>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000d4e:	f000 f8cf 	bl	8000ef0 <Error_Handler>
  }
}
 8000d52:	bf00      	nop
 8000d54:	3740      	adds	r7, #64	; 0x40
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
	...

08000d5c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d62:	f107 0308 	add.w	r3, r7, #8
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	605a      	str	r2, [r3, #4]
 8000d6c:	609a      	str	r2, [r3, #8]
 8000d6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d70:	463b      	mov	r3, r7
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d78:	4b1d      	ldr	r3, [pc, #116]	; (8000df0 <MX_TIM2_Init+0x94>)
 8000d7a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d7e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000d80:	4b1b      	ldr	r3, [pc, #108]	; (8000df0 <MX_TIM2_Init+0x94>)
 8000d82:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000d86:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d88:	4b19      	ldr	r3, [pc, #100]	; (8000df0 <MX_TIM2_Init+0x94>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000d8e:	4b18      	ldr	r3, [pc, #96]	; (8000df0 <MX_TIM2_Init+0x94>)
 8000d90:	2209      	movs	r2, #9
 8000d92:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d94:	4b16      	ldr	r3, [pc, #88]	; (8000df0 <MX_TIM2_Init+0x94>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d9a:	4b15      	ldr	r3, [pc, #84]	; (8000df0 <MX_TIM2_Init+0x94>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000da0:	4813      	ldr	r0, [pc, #76]	; (8000df0 <MX_TIM2_Init+0x94>)
 8000da2:	f001 f8e5 	bl	8001f70 <HAL_TIM_Base_Init>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000dac:	f000 f8a0 	bl	8000ef0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000db0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000db4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000db6:	f107 0308 	add.w	r3, r7, #8
 8000dba:	4619      	mov	r1, r3
 8000dbc:	480c      	ldr	r0, [pc, #48]	; (8000df0 <MX_TIM2_Init+0x94>)
 8000dbe:	f001 fa81 	bl	80022c4 <HAL_TIM_ConfigClockSource>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000dc8:	f000 f892 	bl	8000ef0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dd4:	463b      	mov	r3, r7
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4805      	ldr	r0, [pc, #20]	; (8000df0 <MX_TIM2_Init+0x94>)
 8000dda:	f001 fc53 	bl	8002684 <HAL_TIMEx_MasterConfigSynchronization>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000de4:	f000 f884 	bl	8000ef0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000de8:	bf00      	nop
 8000dea:	3718      	adds	r7, #24
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	20000098 	.word	0x20000098

08000df4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b088      	sub	sp, #32
 8000df8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfa:	f107 0310 	add.w	r3, r7, #16
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	605a      	str	r2, [r3, #4]
 8000e04:	609a      	str	r2, [r3, #8]
 8000e06:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e08:	4b2f      	ldr	r3, [pc, #188]	; (8000ec8 <MX_GPIO_Init+0xd4>)
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	4a2e      	ldr	r2, [pc, #184]	; (8000ec8 <MX_GPIO_Init+0xd4>)
 8000e0e:	f043 0310 	orr.w	r3, r3, #16
 8000e12:	6193      	str	r3, [r2, #24]
 8000e14:	4b2c      	ldr	r3, [pc, #176]	; (8000ec8 <MX_GPIO_Init+0xd4>)
 8000e16:	699b      	ldr	r3, [r3, #24]
 8000e18:	f003 0310 	and.w	r3, r3, #16
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e20:	4b29      	ldr	r3, [pc, #164]	; (8000ec8 <MX_GPIO_Init+0xd4>)
 8000e22:	699b      	ldr	r3, [r3, #24]
 8000e24:	4a28      	ldr	r2, [pc, #160]	; (8000ec8 <MX_GPIO_Init+0xd4>)
 8000e26:	f043 0304 	orr.w	r3, r3, #4
 8000e2a:	6193      	str	r3, [r2, #24]
 8000e2c:	4b26      	ldr	r3, [pc, #152]	; (8000ec8 <MX_GPIO_Init+0xd4>)
 8000e2e:	699b      	ldr	r3, [r3, #24]
 8000e30:	f003 0304 	and.w	r3, r3, #4
 8000e34:	60bb      	str	r3, [r7, #8]
 8000e36:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e38:	4b23      	ldr	r3, [pc, #140]	; (8000ec8 <MX_GPIO_Init+0xd4>)
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	4a22      	ldr	r2, [pc, #136]	; (8000ec8 <MX_GPIO_Init+0xd4>)
 8000e3e:	f043 0308 	orr.w	r3, r3, #8
 8000e42:	6193      	str	r3, [r2, #24]
 8000e44:	4b20      	ldr	r3, [pc, #128]	; (8000ec8 <MX_GPIO_Init+0xd4>)
 8000e46:	699b      	ldr	r3, [r3, #24]
 8000e48:	f003 0308 	and.w	r3, r3, #8
 8000e4c:	607b      	str	r3, [r7, #4]
 8000e4e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_2_Pin|LED_YELLOW_2_Pin|LED_GREEN_2_Pin|LED_YELLOW_1_Pin
 8000e50:	2200      	movs	r2, #0
 8000e52:	f649 01e0 	movw	r1, #39136	; 0x98e0
 8000e56:	481d      	ldr	r0, [pc, #116]	; (8000ecc <MX_GPIO_Init+0xd8>)
 8000e58:	f000 fc71 	bl	800173e <HAL_GPIO_WritePin>
                          |LED_RED_1_Pin|LED_GREEN_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	f44f 71bf 	mov.w	r1, #382	; 0x17e
 8000e62:	481b      	ldr	r0, [pc, #108]	; (8000ed0 <MX_GPIO_Init+0xdc>)
 8000e64:	f000 fc6b 	bl	800173e <HAL_GPIO_WritePin>
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : MODE_BUTTON_Pin SET_BUTTON_Pin INCREASE_BUTTON_Pin */
  GPIO_InitStruct.Pin = MODE_BUTTON_Pin|SET_BUTTON_Pin|INCREASE_BUTTON_Pin;
 8000e68:	f24a 0304 	movw	r3, #40964	; 0xa004
 8000e6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e72:	2301      	movs	r3, #1
 8000e74:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e76:	f107 0310 	add.w	r3, r7, #16
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4815      	ldr	r0, [pc, #84]	; (8000ed4 <MX_GPIO_Init+0xe0>)
 8000e7e:	f000 fac3 	bl	8001408 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_2_Pin LED_YELLOW_2_Pin LED_GREEN_2_Pin LED_YELLOW_1_Pin
                           LED_RED_1_Pin LED_GREEN_1_Pin */
  GPIO_InitStruct.Pin = LED_RED_2_Pin|LED_YELLOW_2_Pin|LED_GREEN_2_Pin|LED_YELLOW_1_Pin
 8000e82:	f649 03e0 	movw	r3, #39136	; 0x98e0
 8000e86:	613b      	str	r3, [r7, #16]
                          |LED_RED_1_Pin|LED_GREEN_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e90:	2302      	movs	r3, #2
 8000e92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e94:	f107 0310 	add.w	r3, r7, #16
 8000e98:	4619      	mov	r1, r3
 8000e9a:	480c      	ldr	r0, [pc, #48]	; (8000ecc <MX_GPIO_Init+0xd8>)
 8000e9c:	f000 fab4 	bl	8001408 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin SEG3_Pin
                           SEG4_Pin SEG5_Pin SEG6_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 8000ea0:	f44f 73bf 	mov.w	r3, #382	; 0x17e
 8000ea4:	613b      	str	r3, [r7, #16]
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb2:	f107 0310 	add.w	r3, r7, #16
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4805      	ldr	r0, [pc, #20]	; (8000ed0 <MX_GPIO_Init+0xdc>)
 8000eba:	f000 faa5 	bl	8001408 <HAL_GPIO_Init>

}
 8000ebe:	bf00      	nop
 8000ec0:	3720      	adds	r7, #32
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40021000 	.word	0x40021000
 8000ecc:	40010800 	.word	0x40010800
 8000ed0:	40010c00 	.word	0x40010c00
 8000ed4:	40011000 	.word	0x40011000

08000ed8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
	timer_run();
 8000ee0:	f000 f840 	bl	8000f64 <timer_run>
	getKeyInput();
 8000ee4:	f7ff f95c 	bl	80001a0 <getKeyInput>
}
 8000ee8:	bf00      	nop
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ef4:	b672      	cpsid	i
}
 8000ef6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ef8:	e7fe      	b.n	8000ef8 <Error_Handler+0x8>
	...

08000efc <setTimer1>:
int timer1_flag = 0;

int timer2_counter = 0;
int timer2_flag = 0;

void setTimer1(int duration){
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TIMER_CYCLE;
 8000f04:	4b07      	ldr	r3, [pc, #28]	; (8000f24 <setTimer1+0x28>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f0e:	4a06      	ldr	r2, [pc, #24]	; (8000f28 <setTimer1+0x2c>)
 8000f10:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000f12:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <setTimer1+0x30>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
}
 8000f18:	bf00      	nop
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bc80      	pop	{r7}
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	20000050 	.word	0x20000050
 8000f28:	200000e0 	.word	0x200000e0
 8000f2c:	200000e4 	.word	0x200000e4

08000f30 <setTimer2>:

void setTimer2(int duration){
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
	timer2_counter = duration / TIMER_CYCLE;
 8000f38:	4b07      	ldr	r3, [pc, #28]	; (8000f58 <setTimer2+0x28>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	687a      	ldr	r2, [r7, #4]
 8000f3e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f42:	4a06      	ldr	r2, [pc, #24]	; (8000f5c <setTimer2+0x2c>)
 8000f44:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8000f46:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <setTimer2+0x30>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
}
 8000f4c:	bf00      	nop
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bc80      	pop	{r7}
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	20000050 	.word	0x20000050
 8000f5c:	200000e8 	.word	0x200000e8
 8000f60:	200000ec 	.word	0x200000ec

08000f64 <timer_run>:

void timer_run(){
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
	if (timer1_counter > 0){
 8000f68:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <timer_run+0x4c>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	dd0b      	ble.n	8000f88 <timer_run+0x24>
		timer1_counter--;
 8000f70:	4b0f      	ldr	r3, [pc, #60]	; (8000fb0 <timer_run+0x4c>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	3b01      	subs	r3, #1
 8000f76:	4a0e      	ldr	r2, [pc, #56]	; (8000fb0 <timer_run+0x4c>)
 8000f78:	6013      	str	r3, [r2, #0]
		if (timer1_counter == 0) timer1_flag = 1;
 8000f7a:	4b0d      	ldr	r3, [pc, #52]	; (8000fb0 <timer_run+0x4c>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d102      	bne.n	8000f88 <timer_run+0x24>
 8000f82:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <timer_run+0x50>)
 8000f84:	2201      	movs	r2, #1
 8000f86:	601a      	str	r2, [r3, #0]
	}
	if (timer2_counter > 0){
 8000f88:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <timer_run+0x54>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	dd0b      	ble.n	8000fa8 <timer_run+0x44>
		timer2_counter--;
 8000f90:	4b09      	ldr	r3, [pc, #36]	; (8000fb8 <timer_run+0x54>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	3b01      	subs	r3, #1
 8000f96:	4a08      	ldr	r2, [pc, #32]	; (8000fb8 <timer_run+0x54>)
 8000f98:	6013      	str	r3, [r2, #0]
		if (timer2_counter == 0) timer2_flag = 1;
 8000f9a:	4b07      	ldr	r3, [pc, #28]	; (8000fb8 <timer_run+0x54>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d102      	bne.n	8000fa8 <timer_run+0x44>
 8000fa2:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <timer_run+0x58>)
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	601a      	str	r2, [r3, #0]
	}
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bc80      	pop	{r7}
 8000fae:	4770      	bx	lr
 8000fb0:	200000e0 	.word	0x200000e0
 8000fb4:	200000e4 	.word	0x200000e4
 8000fb8:	200000e8 	.word	0x200000e8
 8000fbc:	200000ec 	.word	0x200000ec

08000fc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fc6:	4b15      	ldr	r3, [pc, #84]	; (800101c <HAL_MspInit+0x5c>)
 8000fc8:	699b      	ldr	r3, [r3, #24]
 8000fca:	4a14      	ldr	r2, [pc, #80]	; (800101c <HAL_MspInit+0x5c>)
 8000fcc:	f043 0301 	orr.w	r3, r3, #1
 8000fd0:	6193      	str	r3, [r2, #24]
 8000fd2:	4b12      	ldr	r3, [pc, #72]	; (800101c <HAL_MspInit+0x5c>)
 8000fd4:	699b      	ldr	r3, [r3, #24]
 8000fd6:	f003 0301 	and.w	r3, r3, #1
 8000fda:	60bb      	str	r3, [r7, #8]
 8000fdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fde:	4b0f      	ldr	r3, [pc, #60]	; (800101c <HAL_MspInit+0x5c>)
 8000fe0:	69db      	ldr	r3, [r3, #28]
 8000fe2:	4a0e      	ldr	r2, [pc, #56]	; (800101c <HAL_MspInit+0x5c>)
 8000fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fe8:	61d3      	str	r3, [r2, #28]
 8000fea:	4b0c      	ldr	r3, [pc, #48]	; (800101c <HAL_MspInit+0x5c>)
 8000fec:	69db      	ldr	r3, [r3, #28]
 8000fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ff6:	4b0a      	ldr	r3, [pc, #40]	; (8001020 <HAL_MspInit+0x60>)
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	4a04      	ldr	r2, [pc, #16]	; (8001020 <HAL_MspInit+0x60>)
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001012:	bf00      	nop
 8001014:	3714      	adds	r7, #20
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr
 800101c:	40021000 	.word	0x40021000
 8001020:	40010000 	.word	0x40010000

08001024 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001034:	d113      	bne.n	800105e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001036:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <HAL_TIM_Base_MspInit+0x44>)
 8001038:	69db      	ldr	r3, [r3, #28]
 800103a:	4a0b      	ldr	r2, [pc, #44]	; (8001068 <HAL_TIM_Base_MspInit+0x44>)
 800103c:	f043 0301 	orr.w	r3, r3, #1
 8001040:	61d3      	str	r3, [r2, #28]
 8001042:	4b09      	ldr	r3, [pc, #36]	; (8001068 <HAL_TIM_Base_MspInit+0x44>)
 8001044:	69db      	ldr	r3, [r3, #28]
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800104e:	2200      	movs	r2, #0
 8001050:	2100      	movs	r1, #0
 8001052:	201c      	movs	r0, #28
 8001054:	f000 f9a1 	bl	800139a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001058:	201c      	movs	r0, #28
 800105a:	f000 f9ba 	bl	80013d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800105e:	bf00      	nop
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40021000 	.word	0x40021000

0800106c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001070:	e7fe      	b.n	8001070 <NMI_Handler+0x4>

08001072 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001076:	e7fe      	b.n	8001076 <HardFault_Handler+0x4>

08001078 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800107c:	e7fe      	b.n	800107c <MemManage_Handler+0x4>

0800107e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001082:	e7fe      	b.n	8001082 <BusFault_Handler+0x4>

08001084 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001088:	e7fe      	b.n	8001088 <UsageFault_Handler+0x4>

0800108a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	46bd      	mov	sp, r7
 8001092:	bc80      	pop	{r7}
 8001094:	4770      	bx	lr

08001096 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001096:	b480      	push	{r7}
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	46bd      	mov	sp, r7
 800109e:	bc80      	pop	{r7}
 80010a0:	4770      	bx	lr

080010a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010a2:	b480      	push	{r7}
 80010a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bc80      	pop	{r7}
 80010ac:	4770      	bx	lr

080010ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010b2:	f000 f87f 	bl	80011b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
	...

080010bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010c0:	4802      	ldr	r0, [pc, #8]	; (80010cc <TIM2_IRQHandler+0x10>)
 80010c2:	f000 fff7 	bl	80020b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20000098 	.word	0x20000098

080010d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bc80      	pop	{r7}
 80010da:	4770      	bx	lr

080010dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010dc:	480c      	ldr	r0, [pc, #48]	; (8001110 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010de:	490d      	ldr	r1, [pc, #52]	; (8001114 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010e0:	4a0d      	ldr	r2, [pc, #52]	; (8001118 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010e4:	e002      	b.n	80010ec <LoopCopyDataInit>

080010e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ea:	3304      	adds	r3, #4

080010ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010f0:	d3f9      	bcc.n	80010e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010f2:	4a0a      	ldr	r2, [pc, #40]	; (800111c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010f4:	4c0a      	ldr	r4, [pc, #40]	; (8001120 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010f8:	e001      	b.n	80010fe <LoopFillZerobss>

080010fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010fc:	3204      	adds	r2, #4

080010fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001100:	d3fb      	bcc.n	80010fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001102:	f7ff ffe5 	bl	80010d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001106:	f001 fb2d 	bl	8002764 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800110a:	f7ff fdc9 	bl	8000ca0 <main>
  bx lr
 800110e:	4770      	bx	lr
  ldr r0, =_sdata
 8001110:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001114:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001118:	080027fc 	.word	0x080027fc
  ldr r2, =_sbss
 800111c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001120:	200000f4 	.word	0x200000f4

08001124 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001124:	e7fe      	b.n	8001124 <ADC1_2_IRQHandler>
	...

08001128 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800112c:	4b08      	ldr	r3, [pc, #32]	; (8001150 <HAL_Init+0x28>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a07      	ldr	r2, [pc, #28]	; (8001150 <HAL_Init+0x28>)
 8001132:	f043 0310 	orr.w	r3, r3, #16
 8001136:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001138:	2003      	movs	r0, #3
 800113a:	f000 f923 	bl	8001384 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800113e:	200f      	movs	r0, #15
 8001140:	f000 f808 	bl	8001154 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001144:	f7ff ff3c 	bl	8000fc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001148:	2300      	movs	r3, #0
}
 800114a:	4618      	mov	r0, r3
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40022000 	.word	0x40022000

08001154 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800115c:	4b12      	ldr	r3, [pc, #72]	; (80011a8 <HAL_InitTick+0x54>)
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	4b12      	ldr	r3, [pc, #72]	; (80011ac <HAL_InitTick+0x58>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	4619      	mov	r1, r3
 8001166:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800116a:	fbb3 f3f1 	udiv	r3, r3, r1
 800116e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001172:	4618      	mov	r0, r3
 8001174:	f000 f93b 	bl	80013ee <HAL_SYSTICK_Config>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e00e      	b.n	80011a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2b0f      	cmp	r3, #15
 8001186:	d80a      	bhi.n	800119e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001188:	2200      	movs	r2, #0
 800118a:	6879      	ldr	r1, [r7, #4]
 800118c:	f04f 30ff 	mov.w	r0, #4294967295
 8001190:	f000 f903 	bl	800139a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001194:	4a06      	ldr	r2, [pc, #24]	; (80011b0 <HAL_InitTick+0x5c>)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800119a:	2300      	movs	r3, #0
 800119c:	e000      	b.n	80011a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	20000054 	.word	0x20000054
 80011ac:	2000005c 	.word	0x2000005c
 80011b0:	20000058 	.word	0x20000058

080011b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011b8:	4b05      	ldr	r3, [pc, #20]	; (80011d0 <HAL_IncTick+0x1c>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	461a      	mov	r2, r3
 80011be:	4b05      	ldr	r3, [pc, #20]	; (80011d4 <HAL_IncTick+0x20>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4413      	add	r3, r2
 80011c4:	4a03      	ldr	r2, [pc, #12]	; (80011d4 <HAL_IncTick+0x20>)
 80011c6:	6013      	str	r3, [r2, #0]
}
 80011c8:	bf00      	nop
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bc80      	pop	{r7}
 80011ce:	4770      	bx	lr
 80011d0:	2000005c 	.word	0x2000005c
 80011d4:	200000f0 	.word	0x200000f0

080011d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  return uwTick;
 80011dc:	4b02      	ldr	r3, [pc, #8]	; (80011e8 <HAL_GetTick+0x10>)
 80011de:	681b      	ldr	r3, [r3, #0]
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bc80      	pop	{r7}
 80011e6:	4770      	bx	lr
 80011e8:	200000f0 	.word	0x200000f0

080011ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f003 0307 	and.w	r3, r3, #7
 80011fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011fc:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <__NVIC_SetPriorityGrouping+0x44>)
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001202:	68ba      	ldr	r2, [r7, #8]
 8001204:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001208:	4013      	ands	r3, r2
 800120a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001214:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001218:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800121c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800121e:	4a04      	ldr	r2, [pc, #16]	; (8001230 <__NVIC_SetPriorityGrouping+0x44>)
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	60d3      	str	r3, [r2, #12]
}
 8001224:	bf00      	nop
 8001226:	3714      	adds	r7, #20
 8001228:	46bd      	mov	sp, r7
 800122a:	bc80      	pop	{r7}
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001238:	4b04      	ldr	r3, [pc, #16]	; (800124c <__NVIC_GetPriorityGrouping+0x18>)
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	0a1b      	lsrs	r3, r3, #8
 800123e:	f003 0307 	and.w	r3, r3, #7
}
 8001242:	4618      	mov	r0, r3
 8001244:	46bd      	mov	sp, r7
 8001246:	bc80      	pop	{r7}
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	e000ed00 	.word	0xe000ed00

08001250 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800125a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125e:	2b00      	cmp	r3, #0
 8001260:	db0b      	blt.n	800127a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001262:	79fb      	ldrb	r3, [r7, #7]
 8001264:	f003 021f 	and.w	r2, r3, #31
 8001268:	4906      	ldr	r1, [pc, #24]	; (8001284 <__NVIC_EnableIRQ+0x34>)
 800126a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126e:	095b      	lsrs	r3, r3, #5
 8001270:	2001      	movs	r0, #1
 8001272:	fa00 f202 	lsl.w	r2, r0, r2
 8001276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	bc80      	pop	{r7}
 8001282:	4770      	bx	lr
 8001284:	e000e100 	.word	0xe000e100

08001288 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	6039      	str	r1, [r7, #0]
 8001292:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001298:	2b00      	cmp	r3, #0
 800129a:	db0a      	blt.n	80012b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	b2da      	uxtb	r2, r3
 80012a0:	490c      	ldr	r1, [pc, #48]	; (80012d4 <__NVIC_SetPriority+0x4c>)
 80012a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a6:	0112      	lsls	r2, r2, #4
 80012a8:	b2d2      	uxtb	r2, r2
 80012aa:	440b      	add	r3, r1
 80012ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012b0:	e00a      	b.n	80012c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	b2da      	uxtb	r2, r3
 80012b6:	4908      	ldr	r1, [pc, #32]	; (80012d8 <__NVIC_SetPriority+0x50>)
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	f003 030f 	and.w	r3, r3, #15
 80012be:	3b04      	subs	r3, #4
 80012c0:	0112      	lsls	r2, r2, #4
 80012c2:	b2d2      	uxtb	r2, r2
 80012c4:	440b      	add	r3, r1
 80012c6:	761a      	strb	r2, [r3, #24]
}
 80012c8:	bf00      	nop
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bc80      	pop	{r7}
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	e000e100 	.word	0xe000e100
 80012d8:	e000ed00 	.word	0xe000ed00

080012dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012dc:	b480      	push	{r7}
 80012de:	b089      	sub	sp, #36	; 0x24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	f003 0307 	and.w	r3, r3, #7
 80012ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	f1c3 0307 	rsb	r3, r3, #7
 80012f6:	2b04      	cmp	r3, #4
 80012f8:	bf28      	it	cs
 80012fa:	2304      	movcs	r3, #4
 80012fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	3304      	adds	r3, #4
 8001302:	2b06      	cmp	r3, #6
 8001304:	d902      	bls.n	800130c <NVIC_EncodePriority+0x30>
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	3b03      	subs	r3, #3
 800130a:	e000      	b.n	800130e <NVIC_EncodePriority+0x32>
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001310:	f04f 32ff 	mov.w	r2, #4294967295
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	43da      	mvns	r2, r3
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	401a      	ands	r2, r3
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001324:	f04f 31ff 	mov.w	r1, #4294967295
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	fa01 f303 	lsl.w	r3, r1, r3
 800132e:	43d9      	mvns	r1, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001334:	4313      	orrs	r3, r2
         );
}
 8001336:	4618      	mov	r0, r3
 8001338:	3724      	adds	r7, #36	; 0x24
 800133a:	46bd      	mov	sp, r7
 800133c:	bc80      	pop	{r7}
 800133e:	4770      	bx	lr

08001340 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	3b01      	subs	r3, #1
 800134c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001350:	d301      	bcc.n	8001356 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001352:	2301      	movs	r3, #1
 8001354:	e00f      	b.n	8001376 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001356:	4a0a      	ldr	r2, [pc, #40]	; (8001380 <SysTick_Config+0x40>)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	3b01      	subs	r3, #1
 800135c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800135e:	210f      	movs	r1, #15
 8001360:	f04f 30ff 	mov.w	r0, #4294967295
 8001364:	f7ff ff90 	bl	8001288 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001368:	4b05      	ldr	r3, [pc, #20]	; (8001380 <SysTick_Config+0x40>)
 800136a:	2200      	movs	r2, #0
 800136c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800136e:	4b04      	ldr	r3, [pc, #16]	; (8001380 <SysTick_Config+0x40>)
 8001370:	2207      	movs	r2, #7
 8001372:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	e000e010 	.word	0xe000e010

08001384 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f7ff ff2d 	bl	80011ec <__NVIC_SetPriorityGrouping>
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800139a:	b580      	push	{r7, lr}
 800139c:	b086      	sub	sp, #24
 800139e:	af00      	add	r7, sp, #0
 80013a0:	4603      	mov	r3, r0
 80013a2:	60b9      	str	r1, [r7, #8]
 80013a4:	607a      	str	r2, [r7, #4]
 80013a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013a8:	2300      	movs	r3, #0
 80013aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013ac:	f7ff ff42 	bl	8001234 <__NVIC_GetPriorityGrouping>
 80013b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	68b9      	ldr	r1, [r7, #8]
 80013b6:	6978      	ldr	r0, [r7, #20]
 80013b8:	f7ff ff90 	bl	80012dc <NVIC_EncodePriority>
 80013bc:	4602      	mov	r2, r0
 80013be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013c2:	4611      	mov	r1, r2
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff ff5f 	bl	8001288 <__NVIC_SetPriority>
}
 80013ca:	bf00      	nop
 80013cc:	3718      	adds	r7, #24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b082      	sub	sp, #8
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	4603      	mov	r3, r0
 80013da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff ff35 	bl	8001250 <__NVIC_EnableIRQ>
}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b082      	sub	sp, #8
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f7ff ffa2 	bl	8001340 <SysTick_Config>
 80013fc:	4603      	mov	r3, r0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
	...

08001408 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001408:	b480      	push	{r7}
 800140a:	b08b      	sub	sp, #44	; 0x2c
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001412:	2300      	movs	r3, #0
 8001414:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001416:	2300      	movs	r3, #0
 8001418:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800141a:	e169      	b.n	80016f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800141c:	2201      	movs	r2, #1
 800141e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	69fa      	ldr	r2, [r7, #28]
 800142c:	4013      	ands	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	429a      	cmp	r2, r3
 8001436:	f040 8158 	bne.w	80016ea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	4a9a      	ldr	r2, [pc, #616]	; (80016a8 <HAL_GPIO_Init+0x2a0>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d05e      	beq.n	8001502 <HAL_GPIO_Init+0xfa>
 8001444:	4a98      	ldr	r2, [pc, #608]	; (80016a8 <HAL_GPIO_Init+0x2a0>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d875      	bhi.n	8001536 <HAL_GPIO_Init+0x12e>
 800144a:	4a98      	ldr	r2, [pc, #608]	; (80016ac <HAL_GPIO_Init+0x2a4>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d058      	beq.n	8001502 <HAL_GPIO_Init+0xfa>
 8001450:	4a96      	ldr	r2, [pc, #600]	; (80016ac <HAL_GPIO_Init+0x2a4>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d86f      	bhi.n	8001536 <HAL_GPIO_Init+0x12e>
 8001456:	4a96      	ldr	r2, [pc, #600]	; (80016b0 <HAL_GPIO_Init+0x2a8>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d052      	beq.n	8001502 <HAL_GPIO_Init+0xfa>
 800145c:	4a94      	ldr	r2, [pc, #592]	; (80016b0 <HAL_GPIO_Init+0x2a8>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d869      	bhi.n	8001536 <HAL_GPIO_Init+0x12e>
 8001462:	4a94      	ldr	r2, [pc, #592]	; (80016b4 <HAL_GPIO_Init+0x2ac>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d04c      	beq.n	8001502 <HAL_GPIO_Init+0xfa>
 8001468:	4a92      	ldr	r2, [pc, #584]	; (80016b4 <HAL_GPIO_Init+0x2ac>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d863      	bhi.n	8001536 <HAL_GPIO_Init+0x12e>
 800146e:	4a92      	ldr	r2, [pc, #584]	; (80016b8 <HAL_GPIO_Init+0x2b0>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d046      	beq.n	8001502 <HAL_GPIO_Init+0xfa>
 8001474:	4a90      	ldr	r2, [pc, #576]	; (80016b8 <HAL_GPIO_Init+0x2b0>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d85d      	bhi.n	8001536 <HAL_GPIO_Init+0x12e>
 800147a:	2b12      	cmp	r3, #18
 800147c:	d82a      	bhi.n	80014d4 <HAL_GPIO_Init+0xcc>
 800147e:	2b12      	cmp	r3, #18
 8001480:	d859      	bhi.n	8001536 <HAL_GPIO_Init+0x12e>
 8001482:	a201      	add	r2, pc, #4	; (adr r2, 8001488 <HAL_GPIO_Init+0x80>)
 8001484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001488:	08001503 	.word	0x08001503
 800148c:	080014dd 	.word	0x080014dd
 8001490:	080014ef 	.word	0x080014ef
 8001494:	08001531 	.word	0x08001531
 8001498:	08001537 	.word	0x08001537
 800149c:	08001537 	.word	0x08001537
 80014a0:	08001537 	.word	0x08001537
 80014a4:	08001537 	.word	0x08001537
 80014a8:	08001537 	.word	0x08001537
 80014ac:	08001537 	.word	0x08001537
 80014b0:	08001537 	.word	0x08001537
 80014b4:	08001537 	.word	0x08001537
 80014b8:	08001537 	.word	0x08001537
 80014bc:	08001537 	.word	0x08001537
 80014c0:	08001537 	.word	0x08001537
 80014c4:	08001537 	.word	0x08001537
 80014c8:	08001537 	.word	0x08001537
 80014cc:	080014e5 	.word	0x080014e5
 80014d0:	080014f9 	.word	0x080014f9
 80014d4:	4a79      	ldr	r2, [pc, #484]	; (80016bc <HAL_GPIO_Init+0x2b4>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d013      	beq.n	8001502 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014da:	e02c      	b.n	8001536 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	623b      	str	r3, [r7, #32]
          break;
 80014e2:	e029      	b.n	8001538 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	3304      	adds	r3, #4
 80014ea:	623b      	str	r3, [r7, #32]
          break;
 80014ec:	e024      	b.n	8001538 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	68db      	ldr	r3, [r3, #12]
 80014f2:	3308      	adds	r3, #8
 80014f4:	623b      	str	r3, [r7, #32]
          break;
 80014f6:	e01f      	b.n	8001538 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	330c      	adds	r3, #12
 80014fe:	623b      	str	r3, [r7, #32]
          break;
 8001500:	e01a      	b.n	8001538 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d102      	bne.n	8001510 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800150a:	2304      	movs	r3, #4
 800150c:	623b      	str	r3, [r7, #32]
          break;
 800150e:	e013      	b.n	8001538 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d105      	bne.n	8001524 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001518:	2308      	movs	r3, #8
 800151a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	69fa      	ldr	r2, [r7, #28]
 8001520:	611a      	str	r2, [r3, #16]
          break;
 8001522:	e009      	b.n	8001538 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001524:	2308      	movs	r3, #8
 8001526:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	69fa      	ldr	r2, [r7, #28]
 800152c:	615a      	str	r2, [r3, #20]
          break;
 800152e:	e003      	b.n	8001538 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001530:	2300      	movs	r3, #0
 8001532:	623b      	str	r3, [r7, #32]
          break;
 8001534:	e000      	b.n	8001538 <HAL_GPIO_Init+0x130>
          break;
 8001536:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	2bff      	cmp	r3, #255	; 0xff
 800153c:	d801      	bhi.n	8001542 <HAL_GPIO_Init+0x13a>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	e001      	b.n	8001546 <HAL_GPIO_Init+0x13e>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	3304      	adds	r3, #4
 8001546:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	2bff      	cmp	r3, #255	; 0xff
 800154c:	d802      	bhi.n	8001554 <HAL_GPIO_Init+0x14c>
 800154e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	e002      	b.n	800155a <HAL_GPIO_Init+0x152>
 8001554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001556:	3b08      	subs	r3, #8
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	210f      	movs	r1, #15
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	fa01 f303 	lsl.w	r3, r1, r3
 8001568:	43db      	mvns	r3, r3
 800156a:	401a      	ands	r2, r3
 800156c:	6a39      	ldr	r1, [r7, #32]
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	fa01 f303 	lsl.w	r3, r1, r3
 8001574:	431a      	orrs	r2, r3
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001582:	2b00      	cmp	r3, #0
 8001584:	f000 80b1 	beq.w	80016ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001588:	4b4d      	ldr	r3, [pc, #308]	; (80016c0 <HAL_GPIO_Init+0x2b8>)
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	4a4c      	ldr	r2, [pc, #304]	; (80016c0 <HAL_GPIO_Init+0x2b8>)
 800158e:	f043 0301 	orr.w	r3, r3, #1
 8001592:	6193      	str	r3, [r2, #24]
 8001594:	4b4a      	ldr	r3, [pc, #296]	; (80016c0 <HAL_GPIO_Init+0x2b8>)
 8001596:	699b      	ldr	r3, [r3, #24]
 8001598:	f003 0301 	and.w	r3, r3, #1
 800159c:	60bb      	str	r3, [r7, #8]
 800159e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015a0:	4a48      	ldr	r2, [pc, #288]	; (80016c4 <HAL_GPIO_Init+0x2bc>)
 80015a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a4:	089b      	lsrs	r3, r3, #2
 80015a6:	3302      	adds	r3, #2
 80015a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b0:	f003 0303 	and.w	r3, r3, #3
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	220f      	movs	r2, #15
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	43db      	mvns	r3, r3
 80015be:	68fa      	ldr	r2, [r7, #12]
 80015c0:	4013      	ands	r3, r2
 80015c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	4a40      	ldr	r2, [pc, #256]	; (80016c8 <HAL_GPIO_Init+0x2c0>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d013      	beq.n	80015f4 <HAL_GPIO_Init+0x1ec>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	4a3f      	ldr	r2, [pc, #252]	; (80016cc <HAL_GPIO_Init+0x2c4>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d00d      	beq.n	80015f0 <HAL_GPIO_Init+0x1e8>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	4a3e      	ldr	r2, [pc, #248]	; (80016d0 <HAL_GPIO_Init+0x2c8>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d007      	beq.n	80015ec <HAL_GPIO_Init+0x1e4>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	4a3d      	ldr	r2, [pc, #244]	; (80016d4 <HAL_GPIO_Init+0x2cc>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d101      	bne.n	80015e8 <HAL_GPIO_Init+0x1e0>
 80015e4:	2303      	movs	r3, #3
 80015e6:	e006      	b.n	80015f6 <HAL_GPIO_Init+0x1ee>
 80015e8:	2304      	movs	r3, #4
 80015ea:	e004      	b.n	80015f6 <HAL_GPIO_Init+0x1ee>
 80015ec:	2302      	movs	r3, #2
 80015ee:	e002      	b.n	80015f6 <HAL_GPIO_Init+0x1ee>
 80015f0:	2301      	movs	r3, #1
 80015f2:	e000      	b.n	80015f6 <HAL_GPIO_Init+0x1ee>
 80015f4:	2300      	movs	r3, #0
 80015f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015f8:	f002 0203 	and.w	r2, r2, #3
 80015fc:	0092      	lsls	r2, r2, #2
 80015fe:	4093      	lsls	r3, r2
 8001600:	68fa      	ldr	r2, [r7, #12]
 8001602:	4313      	orrs	r3, r2
 8001604:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001606:	492f      	ldr	r1, [pc, #188]	; (80016c4 <HAL_GPIO_Init+0x2bc>)
 8001608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160a:	089b      	lsrs	r3, r3, #2
 800160c:	3302      	adds	r3, #2
 800160e:	68fa      	ldr	r2, [r7, #12]
 8001610:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d006      	beq.n	800162e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001620:	4b2d      	ldr	r3, [pc, #180]	; (80016d8 <HAL_GPIO_Init+0x2d0>)
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	492c      	ldr	r1, [pc, #176]	; (80016d8 <HAL_GPIO_Init+0x2d0>)
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	4313      	orrs	r3, r2
 800162a:	600b      	str	r3, [r1, #0]
 800162c:	e006      	b.n	800163c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800162e:	4b2a      	ldr	r3, [pc, #168]	; (80016d8 <HAL_GPIO_Init+0x2d0>)
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	43db      	mvns	r3, r3
 8001636:	4928      	ldr	r1, [pc, #160]	; (80016d8 <HAL_GPIO_Init+0x2d0>)
 8001638:	4013      	ands	r3, r2
 800163a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d006      	beq.n	8001656 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001648:	4b23      	ldr	r3, [pc, #140]	; (80016d8 <HAL_GPIO_Init+0x2d0>)
 800164a:	685a      	ldr	r2, [r3, #4]
 800164c:	4922      	ldr	r1, [pc, #136]	; (80016d8 <HAL_GPIO_Init+0x2d0>)
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	4313      	orrs	r3, r2
 8001652:	604b      	str	r3, [r1, #4]
 8001654:	e006      	b.n	8001664 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001656:	4b20      	ldr	r3, [pc, #128]	; (80016d8 <HAL_GPIO_Init+0x2d0>)
 8001658:	685a      	ldr	r2, [r3, #4]
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	43db      	mvns	r3, r3
 800165e:	491e      	ldr	r1, [pc, #120]	; (80016d8 <HAL_GPIO_Init+0x2d0>)
 8001660:	4013      	ands	r3, r2
 8001662:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d006      	beq.n	800167e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001670:	4b19      	ldr	r3, [pc, #100]	; (80016d8 <HAL_GPIO_Init+0x2d0>)
 8001672:	689a      	ldr	r2, [r3, #8]
 8001674:	4918      	ldr	r1, [pc, #96]	; (80016d8 <HAL_GPIO_Init+0x2d0>)
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	4313      	orrs	r3, r2
 800167a:	608b      	str	r3, [r1, #8]
 800167c:	e006      	b.n	800168c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800167e:	4b16      	ldr	r3, [pc, #88]	; (80016d8 <HAL_GPIO_Init+0x2d0>)
 8001680:	689a      	ldr	r2, [r3, #8]
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	43db      	mvns	r3, r3
 8001686:	4914      	ldr	r1, [pc, #80]	; (80016d8 <HAL_GPIO_Init+0x2d0>)
 8001688:	4013      	ands	r3, r2
 800168a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d021      	beq.n	80016dc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001698:	4b0f      	ldr	r3, [pc, #60]	; (80016d8 <HAL_GPIO_Init+0x2d0>)
 800169a:	68da      	ldr	r2, [r3, #12]
 800169c:	490e      	ldr	r1, [pc, #56]	; (80016d8 <HAL_GPIO_Init+0x2d0>)
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	60cb      	str	r3, [r1, #12]
 80016a4:	e021      	b.n	80016ea <HAL_GPIO_Init+0x2e2>
 80016a6:	bf00      	nop
 80016a8:	10320000 	.word	0x10320000
 80016ac:	10310000 	.word	0x10310000
 80016b0:	10220000 	.word	0x10220000
 80016b4:	10210000 	.word	0x10210000
 80016b8:	10120000 	.word	0x10120000
 80016bc:	10110000 	.word	0x10110000
 80016c0:	40021000 	.word	0x40021000
 80016c4:	40010000 	.word	0x40010000
 80016c8:	40010800 	.word	0x40010800
 80016cc:	40010c00 	.word	0x40010c00
 80016d0:	40011000 	.word	0x40011000
 80016d4:	40011400 	.word	0x40011400
 80016d8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016dc:	4b0b      	ldr	r3, [pc, #44]	; (800170c <HAL_GPIO_Init+0x304>)
 80016de:	68da      	ldr	r2, [r3, #12]
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	43db      	mvns	r3, r3
 80016e4:	4909      	ldr	r1, [pc, #36]	; (800170c <HAL_GPIO_Init+0x304>)
 80016e6:	4013      	ands	r3, r2
 80016e8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80016ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ec:	3301      	adds	r3, #1
 80016ee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f6:	fa22 f303 	lsr.w	r3, r2, r3
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	f47f ae8e 	bne.w	800141c <HAL_GPIO_Init+0x14>
  }
}
 8001700:	bf00      	nop
 8001702:	bf00      	nop
 8001704:	372c      	adds	r7, #44	; 0x2c
 8001706:	46bd      	mov	sp, r7
 8001708:	bc80      	pop	{r7}
 800170a:	4770      	bx	lr
 800170c:	40010400 	.word	0x40010400

08001710 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001710:	b480      	push	{r7}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	460b      	mov	r3, r1
 800171a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689a      	ldr	r2, [r3, #8]
 8001720:	887b      	ldrh	r3, [r7, #2]
 8001722:	4013      	ands	r3, r2
 8001724:	2b00      	cmp	r3, #0
 8001726:	d002      	beq.n	800172e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001728:	2301      	movs	r3, #1
 800172a:	73fb      	strb	r3, [r7, #15]
 800172c:	e001      	b.n	8001732 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800172e:	2300      	movs	r3, #0
 8001730:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001732:	7bfb      	ldrb	r3, [r7, #15]
}
 8001734:	4618      	mov	r0, r3
 8001736:	3714      	adds	r7, #20
 8001738:	46bd      	mov	sp, r7
 800173a:	bc80      	pop	{r7}
 800173c:	4770      	bx	lr

0800173e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800173e:	b480      	push	{r7}
 8001740:	b083      	sub	sp, #12
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
 8001746:	460b      	mov	r3, r1
 8001748:	807b      	strh	r3, [r7, #2]
 800174a:	4613      	mov	r3, r2
 800174c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800174e:	787b      	ldrb	r3, [r7, #1]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d003      	beq.n	800175c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001754:	887a      	ldrh	r2, [r7, #2]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800175a:	e003      	b.n	8001764 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800175c:	887b      	ldrh	r3, [r7, #2]
 800175e:	041a      	lsls	r2, r3, #16
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	611a      	str	r2, [r3, #16]
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	bc80      	pop	{r7}
 800176c:	4770      	bx	lr

0800176e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800176e:	b480      	push	{r7}
 8001770:	b085      	sub	sp, #20
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
 8001776:	460b      	mov	r3, r1
 8001778:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001780:	887a      	ldrh	r2, [r7, #2]
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	4013      	ands	r3, r2
 8001786:	041a      	lsls	r2, r3, #16
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	43d9      	mvns	r1, r3
 800178c:	887b      	ldrh	r3, [r7, #2]
 800178e:	400b      	ands	r3, r1
 8001790:	431a      	orrs	r2, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	611a      	str	r2, [r3, #16]
}
 8001796:	bf00      	nop
 8001798:	3714      	adds	r7, #20
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr

080017a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d101      	bne.n	80017b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e272      	b.n	8001c98 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	f000 8087 	beq.w	80018ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017c0:	4b92      	ldr	r3, [pc, #584]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f003 030c 	and.w	r3, r3, #12
 80017c8:	2b04      	cmp	r3, #4
 80017ca:	d00c      	beq.n	80017e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017cc:	4b8f      	ldr	r3, [pc, #572]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f003 030c 	and.w	r3, r3, #12
 80017d4:	2b08      	cmp	r3, #8
 80017d6:	d112      	bne.n	80017fe <HAL_RCC_OscConfig+0x5e>
 80017d8:	4b8c      	ldr	r3, [pc, #560]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017e4:	d10b      	bne.n	80017fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017e6:	4b89      	ldr	r3, [pc, #548]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d06c      	beq.n	80018cc <HAL_RCC_OscConfig+0x12c>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d168      	bne.n	80018cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e24c      	b.n	8001c98 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001806:	d106      	bne.n	8001816 <HAL_RCC_OscConfig+0x76>
 8001808:	4b80      	ldr	r3, [pc, #512]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a7f      	ldr	r2, [pc, #508]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 800180e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001812:	6013      	str	r3, [r2, #0]
 8001814:	e02e      	b.n	8001874 <HAL_RCC_OscConfig+0xd4>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d10c      	bne.n	8001838 <HAL_RCC_OscConfig+0x98>
 800181e:	4b7b      	ldr	r3, [pc, #492]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a7a      	ldr	r2, [pc, #488]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001824:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001828:	6013      	str	r3, [r2, #0]
 800182a:	4b78      	ldr	r3, [pc, #480]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a77      	ldr	r2, [pc, #476]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001830:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001834:	6013      	str	r3, [r2, #0]
 8001836:	e01d      	b.n	8001874 <HAL_RCC_OscConfig+0xd4>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001840:	d10c      	bne.n	800185c <HAL_RCC_OscConfig+0xbc>
 8001842:	4b72      	ldr	r3, [pc, #456]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a71      	ldr	r2, [pc, #452]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001848:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800184c:	6013      	str	r3, [r2, #0]
 800184e:	4b6f      	ldr	r3, [pc, #444]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a6e      	ldr	r2, [pc, #440]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001854:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001858:	6013      	str	r3, [r2, #0]
 800185a:	e00b      	b.n	8001874 <HAL_RCC_OscConfig+0xd4>
 800185c:	4b6b      	ldr	r3, [pc, #428]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a6a      	ldr	r2, [pc, #424]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001862:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001866:	6013      	str	r3, [r2, #0]
 8001868:	4b68      	ldr	r3, [pc, #416]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a67      	ldr	r2, [pc, #412]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 800186e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001872:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d013      	beq.n	80018a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800187c:	f7ff fcac 	bl	80011d8 <HAL_GetTick>
 8001880:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001884:	f7ff fca8 	bl	80011d8 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b64      	cmp	r3, #100	; 0x64
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e200      	b.n	8001c98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001896:	4b5d      	ldr	r3, [pc, #372]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d0f0      	beq.n	8001884 <HAL_RCC_OscConfig+0xe4>
 80018a2:	e014      	b.n	80018ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a4:	f7ff fc98 	bl	80011d8 <HAL_GetTick>
 80018a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018aa:	e008      	b.n	80018be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018ac:	f7ff fc94 	bl	80011d8 <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b64      	cmp	r3, #100	; 0x64
 80018b8:	d901      	bls.n	80018be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e1ec      	b.n	8001c98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018be:	4b53      	ldr	r3, [pc, #332]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d1f0      	bne.n	80018ac <HAL_RCC_OscConfig+0x10c>
 80018ca:	e000      	b.n	80018ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d063      	beq.n	80019a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018da:	4b4c      	ldr	r3, [pc, #304]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f003 030c 	and.w	r3, r3, #12
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d00b      	beq.n	80018fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80018e6:	4b49      	ldr	r3, [pc, #292]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f003 030c 	and.w	r3, r3, #12
 80018ee:	2b08      	cmp	r3, #8
 80018f0:	d11c      	bne.n	800192c <HAL_RCC_OscConfig+0x18c>
 80018f2:	4b46      	ldr	r3, [pc, #280]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d116      	bne.n	800192c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018fe:	4b43      	ldr	r3, [pc, #268]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	2b00      	cmp	r3, #0
 8001908:	d005      	beq.n	8001916 <HAL_RCC_OscConfig+0x176>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	691b      	ldr	r3, [r3, #16]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d001      	beq.n	8001916 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e1c0      	b.n	8001c98 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001916:	4b3d      	ldr	r3, [pc, #244]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	695b      	ldr	r3, [r3, #20]
 8001922:	00db      	lsls	r3, r3, #3
 8001924:	4939      	ldr	r1, [pc, #228]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001926:	4313      	orrs	r3, r2
 8001928:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800192a:	e03a      	b.n	80019a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	691b      	ldr	r3, [r3, #16]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d020      	beq.n	8001976 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001934:	4b36      	ldr	r3, [pc, #216]	; (8001a10 <HAL_RCC_OscConfig+0x270>)
 8001936:	2201      	movs	r2, #1
 8001938:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800193a:	f7ff fc4d 	bl	80011d8 <HAL_GetTick>
 800193e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001940:	e008      	b.n	8001954 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001942:	f7ff fc49 	bl	80011d8 <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d901      	bls.n	8001954 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e1a1      	b.n	8001c98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001954:	4b2d      	ldr	r3, [pc, #180]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d0f0      	beq.n	8001942 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001960:	4b2a      	ldr	r3, [pc, #168]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	695b      	ldr	r3, [r3, #20]
 800196c:	00db      	lsls	r3, r3, #3
 800196e:	4927      	ldr	r1, [pc, #156]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001970:	4313      	orrs	r3, r2
 8001972:	600b      	str	r3, [r1, #0]
 8001974:	e015      	b.n	80019a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001976:	4b26      	ldr	r3, [pc, #152]	; (8001a10 <HAL_RCC_OscConfig+0x270>)
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800197c:	f7ff fc2c 	bl	80011d8 <HAL_GetTick>
 8001980:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001982:	e008      	b.n	8001996 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001984:	f7ff fc28 	bl	80011d8 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b02      	cmp	r3, #2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e180      	b.n	8001c98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001996:	4b1d      	ldr	r3, [pc, #116]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d1f0      	bne.n	8001984 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0308 	and.w	r3, r3, #8
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d03a      	beq.n	8001a24 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	699b      	ldr	r3, [r3, #24]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d019      	beq.n	80019ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019b6:	4b17      	ldr	r3, [pc, #92]	; (8001a14 <HAL_RCC_OscConfig+0x274>)
 80019b8:	2201      	movs	r2, #1
 80019ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019bc:	f7ff fc0c 	bl	80011d8 <HAL_GetTick>
 80019c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019c4:	f7ff fc08 	bl	80011d8 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e160      	b.n	8001c98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019d6:	4b0d      	ldr	r3, [pc, #52]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 80019d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d0f0      	beq.n	80019c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80019e2:	2001      	movs	r0, #1
 80019e4:	f000 faa6 	bl	8001f34 <RCC_Delay>
 80019e8:	e01c      	b.n	8001a24 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019ea:	4b0a      	ldr	r3, [pc, #40]	; (8001a14 <HAL_RCC_OscConfig+0x274>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019f0:	f7ff fbf2 	bl	80011d8 <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019f6:	e00f      	b.n	8001a18 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019f8:	f7ff fbee 	bl	80011d8 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d908      	bls.n	8001a18 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e146      	b.n	8001c98 <HAL_RCC_OscConfig+0x4f8>
 8001a0a:	bf00      	nop
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	42420000 	.word	0x42420000
 8001a14:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a18:	4b92      	ldr	r3, [pc, #584]	; (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d1e9      	bne.n	80019f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0304 	and.w	r3, r3, #4
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	f000 80a6 	beq.w	8001b7e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a32:	2300      	movs	r3, #0
 8001a34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a36:	4b8b      	ldr	r3, [pc, #556]	; (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001a38:	69db      	ldr	r3, [r3, #28]
 8001a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d10d      	bne.n	8001a5e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a42:	4b88      	ldr	r3, [pc, #544]	; (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001a44:	69db      	ldr	r3, [r3, #28]
 8001a46:	4a87      	ldr	r2, [pc, #540]	; (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001a48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a4c:	61d3      	str	r3, [r2, #28]
 8001a4e:	4b85      	ldr	r3, [pc, #532]	; (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001a50:	69db      	ldr	r3, [r3, #28]
 8001a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a56:	60bb      	str	r3, [r7, #8]
 8001a58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a5e:	4b82      	ldr	r3, [pc, #520]	; (8001c68 <HAL_RCC_OscConfig+0x4c8>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d118      	bne.n	8001a9c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a6a:	4b7f      	ldr	r3, [pc, #508]	; (8001c68 <HAL_RCC_OscConfig+0x4c8>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a7e      	ldr	r2, [pc, #504]	; (8001c68 <HAL_RCC_OscConfig+0x4c8>)
 8001a70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a76:	f7ff fbaf 	bl	80011d8 <HAL_GetTick>
 8001a7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a7c:	e008      	b.n	8001a90 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a7e:	f7ff fbab 	bl	80011d8 <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b64      	cmp	r3, #100	; 0x64
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e103      	b.n	8001c98 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a90:	4b75      	ldr	r3, [pc, #468]	; (8001c68 <HAL_RCC_OscConfig+0x4c8>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d0f0      	beq.n	8001a7e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d106      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x312>
 8001aa4:	4b6f      	ldr	r3, [pc, #444]	; (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001aa6:	6a1b      	ldr	r3, [r3, #32]
 8001aa8:	4a6e      	ldr	r2, [pc, #440]	; (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001aaa:	f043 0301 	orr.w	r3, r3, #1
 8001aae:	6213      	str	r3, [r2, #32]
 8001ab0:	e02d      	b.n	8001b0e <HAL_RCC_OscConfig+0x36e>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d10c      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x334>
 8001aba:	4b6a      	ldr	r3, [pc, #424]	; (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001abc:	6a1b      	ldr	r3, [r3, #32]
 8001abe:	4a69      	ldr	r2, [pc, #420]	; (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001ac0:	f023 0301 	bic.w	r3, r3, #1
 8001ac4:	6213      	str	r3, [r2, #32]
 8001ac6:	4b67      	ldr	r3, [pc, #412]	; (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001ac8:	6a1b      	ldr	r3, [r3, #32]
 8001aca:	4a66      	ldr	r2, [pc, #408]	; (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001acc:	f023 0304 	bic.w	r3, r3, #4
 8001ad0:	6213      	str	r3, [r2, #32]
 8001ad2:	e01c      	b.n	8001b0e <HAL_RCC_OscConfig+0x36e>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	2b05      	cmp	r3, #5
 8001ada:	d10c      	bne.n	8001af6 <HAL_RCC_OscConfig+0x356>
 8001adc:	4b61      	ldr	r3, [pc, #388]	; (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001ade:	6a1b      	ldr	r3, [r3, #32]
 8001ae0:	4a60      	ldr	r2, [pc, #384]	; (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001ae2:	f043 0304 	orr.w	r3, r3, #4
 8001ae6:	6213      	str	r3, [r2, #32]
 8001ae8:	4b5e      	ldr	r3, [pc, #376]	; (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001aea:	6a1b      	ldr	r3, [r3, #32]
 8001aec:	4a5d      	ldr	r2, [pc, #372]	; (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001aee:	f043 0301 	orr.w	r3, r3, #1
 8001af2:	6213      	str	r3, [r2, #32]
 8001af4:	e00b      	b.n	8001b0e <HAL_RCC_OscConfig+0x36e>
 8001af6:	4b5b      	ldr	r3, [pc, #364]	; (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001af8:	6a1b      	ldr	r3, [r3, #32]
 8001afa:	4a5a      	ldr	r2, [pc, #360]	; (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001afc:	f023 0301 	bic.w	r3, r3, #1
 8001b00:	6213      	str	r3, [r2, #32]
 8001b02:	4b58      	ldr	r3, [pc, #352]	; (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001b04:	6a1b      	ldr	r3, [r3, #32]
 8001b06:	4a57      	ldr	r2, [pc, #348]	; (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001b08:	f023 0304 	bic.w	r3, r3, #4
 8001b0c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d015      	beq.n	8001b42 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b16:	f7ff fb5f 	bl	80011d8 <HAL_GetTick>
 8001b1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b1c:	e00a      	b.n	8001b34 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b1e:	f7ff fb5b 	bl	80011d8 <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e0b1      	b.n	8001c98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b34:	4b4b      	ldr	r3, [pc, #300]	; (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001b36:	6a1b      	ldr	r3, [r3, #32]
 8001b38:	f003 0302 	and.w	r3, r3, #2
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d0ee      	beq.n	8001b1e <HAL_RCC_OscConfig+0x37e>
 8001b40:	e014      	b.n	8001b6c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b42:	f7ff fb49 	bl	80011d8 <HAL_GetTick>
 8001b46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b48:	e00a      	b.n	8001b60 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b4a:	f7ff fb45 	bl	80011d8 <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e09b      	b.n	8001c98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b60:	4b40      	ldr	r3, [pc, #256]	; (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001b62:	6a1b      	ldr	r3, [r3, #32]
 8001b64:	f003 0302 	and.w	r3, r3, #2
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d1ee      	bne.n	8001b4a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b6c:	7dfb      	ldrb	r3, [r7, #23]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d105      	bne.n	8001b7e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b72:	4b3c      	ldr	r3, [pc, #240]	; (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001b74:	69db      	ldr	r3, [r3, #28]
 8001b76:	4a3b      	ldr	r2, [pc, #236]	; (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001b78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b7c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	69db      	ldr	r3, [r3, #28]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	f000 8087 	beq.w	8001c96 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b88:	4b36      	ldr	r3, [pc, #216]	; (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f003 030c 	and.w	r3, r3, #12
 8001b90:	2b08      	cmp	r3, #8
 8001b92:	d061      	beq.n	8001c58 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	69db      	ldr	r3, [r3, #28]
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d146      	bne.n	8001c2a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b9c:	4b33      	ldr	r3, [pc, #204]	; (8001c6c <HAL_RCC_OscConfig+0x4cc>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba2:	f7ff fb19 	bl	80011d8 <HAL_GetTick>
 8001ba6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ba8:	e008      	b.n	8001bbc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001baa:	f7ff fb15 	bl	80011d8 <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e06d      	b.n	8001c98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bbc:	4b29      	ldr	r3, [pc, #164]	; (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d1f0      	bne.n	8001baa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a1b      	ldr	r3, [r3, #32]
 8001bcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bd0:	d108      	bne.n	8001be4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001bd2:	4b24      	ldr	r3, [pc, #144]	; (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	4921      	ldr	r1, [pc, #132]	; (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001be0:	4313      	orrs	r3, r2
 8001be2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001be4:	4b1f      	ldr	r3, [pc, #124]	; (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6a19      	ldr	r1, [r3, #32]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf4:	430b      	orrs	r3, r1
 8001bf6:	491b      	ldr	r1, [pc, #108]	; (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bfc:	4b1b      	ldr	r3, [pc, #108]	; (8001c6c <HAL_RCC_OscConfig+0x4cc>)
 8001bfe:	2201      	movs	r2, #1
 8001c00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c02:	f7ff fae9 	bl	80011d8 <HAL_GetTick>
 8001c06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c08:	e008      	b.n	8001c1c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c0a:	f7ff fae5 	bl	80011d8 <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e03d      	b.n	8001c98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c1c:	4b11      	ldr	r3, [pc, #68]	; (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d0f0      	beq.n	8001c0a <HAL_RCC_OscConfig+0x46a>
 8001c28:	e035      	b.n	8001c96 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c2a:	4b10      	ldr	r3, [pc, #64]	; (8001c6c <HAL_RCC_OscConfig+0x4cc>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c30:	f7ff fad2 	bl	80011d8 <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c38:	f7ff face 	bl	80011d8 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e026      	b.n	8001c98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c4a:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d1f0      	bne.n	8001c38 <HAL_RCC_OscConfig+0x498>
 8001c56:	e01e      	b.n	8001c96 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	69db      	ldr	r3, [r3, #28]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d107      	bne.n	8001c70 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e019      	b.n	8001c98 <HAL_RCC_OscConfig+0x4f8>
 8001c64:	40021000 	.word	0x40021000
 8001c68:	40007000 	.word	0x40007000
 8001c6c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c70:	4b0b      	ldr	r3, [pc, #44]	; (8001ca0 <HAL_RCC_OscConfig+0x500>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a1b      	ldr	r3, [r3, #32]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d106      	bne.n	8001c92 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d001      	beq.n	8001c96 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e000      	b.n	8001c98 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001c96:	2300      	movs	r3, #0
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3718      	adds	r7, #24
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	40021000 	.word	0x40021000

08001ca4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d101      	bne.n	8001cb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e0d0      	b.n	8001e5a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cb8:	4b6a      	ldr	r3, [pc, #424]	; (8001e64 <HAL_RCC_ClockConfig+0x1c0>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0307 	and.w	r3, r3, #7
 8001cc0:	683a      	ldr	r2, [r7, #0]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d910      	bls.n	8001ce8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cc6:	4b67      	ldr	r3, [pc, #412]	; (8001e64 <HAL_RCC_ClockConfig+0x1c0>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f023 0207 	bic.w	r2, r3, #7
 8001cce:	4965      	ldr	r1, [pc, #404]	; (8001e64 <HAL_RCC_ClockConfig+0x1c0>)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cd6:	4b63      	ldr	r3, [pc, #396]	; (8001e64 <HAL_RCC_ClockConfig+0x1c0>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0307 	and.w	r3, r3, #7
 8001cde:	683a      	ldr	r2, [r7, #0]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d001      	beq.n	8001ce8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e0b8      	b.n	8001e5a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d020      	beq.n	8001d36 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0304 	and.w	r3, r3, #4
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d005      	beq.n	8001d0c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d00:	4b59      	ldr	r3, [pc, #356]	; (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	4a58      	ldr	r2, [pc, #352]	; (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001d06:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d0a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0308 	and.w	r3, r3, #8
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d005      	beq.n	8001d24 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d18:	4b53      	ldr	r3, [pc, #332]	; (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	4a52      	ldr	r2, [pc, #328]	; (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001d1e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d22:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d24:	4b50      	ldr	r3, [pc, #320]	; (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	494d      	ldr	r1, [pc, #308]	; (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001d32:	4313      	orrs	r3, r2
 8001d34:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d040      	beq.n	8001dc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d107      	bne.n	8001d5a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d4a:	4b47      	ldr	r3, [pc, #284]	; (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d115      	bne.n	8001d82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e07f      	b.n	8001e5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d107      	bne.n	8001d72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d62:	4b41      	ldr	r3, [pc, #260]	; (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d109      	bne.n	8001d82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e073      	b.n	8001e5a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d72:	4b3d      	ldr	r3, [pc, #244]	; (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d101      	bne.n	8001d82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e06b      	b.n	8001e5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d82:	4b39      	ldr	r3, [pc, #228]	; (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f023 0203 	bic.w	r2, r3, #3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	4936      	ldr	r1, [pc, #216]	; (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001d90:	4313      	orrs	r3, r2
 8001d92:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d94:	f7ff fa20 	bl	80011d8 <HAL_GetTick>
 8001d98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d9a:	e00a      	b.n	8001db2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d9c:	f7ff fa1c 	bl	80011d8 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e053      	b.n	8001e5a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001db2:	4b2d      	ldr	r3, [pc, #180]	; (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f003 020c 	and.w	r2, r3, #12
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d1eb      	bne.n	8001d9c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001dc4:	4b27      	ldr	r3, [pc, #156]	; (8001e64 <HAL_RCC_ClockConfig+0x1c0>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0307 	and.w	r3, r3, #7
 8001dcc:	683a      	ldr	r2, [r7, #0]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d210      	bcs.n	8001df4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dd2:	4b24      	ldr	r3, [pc, #144]	; (8001e64 <HAL_RCC_ClockConfig+0x1c0>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f023 0207 	bic.w	r2, r3, #7
 8001dda:	4922      	ldr	r1, [pc, #136]	; (8001e64 <HAL_RCC_ClockConfig+0x1c0>)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001de2:	4b20      	ldr	r3, [pc, #128]	; (8001e64 <HAL_RCC_ClockConfig+0x1c0>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0307 	and.w	r3, r3, #7
 8001dea:	683a      	ldr	r2, [r7, #0]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d001      	beq.n	8001df4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e032      	b.n	8001e5a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0304 	and.w	r3, r3, #4
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d008      	beq.n	8001e12 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e00:	4b19      	ldr	r3, [pc, #100]	; (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	4916      	ldr	r1, [pc, #88]	; (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0308 	and.w	r3, r3, #8
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d009      	beq.n	8001e32 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e1e:	4b12      	ldr	r3, [pc, #72]	; (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	490e      	ldr	r1, [pc, #56]	; (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e32:	f000 f821 	bl	8001e78 <HAL_RCC_GetSysClockFreq>
 8001e36:	4602      	mov	r2, r0
 8001e38:	4b0b      	ldr	r3, [pc, #44]	; (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	091b      	lsrs	r3, r3, #4
 8001e3e:	f003 030f 	and.w	r3, r3, #15
 8001e42:	490a      	ldr	r1, [pc, #40]	; (8001e6c <HAL_RCC_ClockConfig+0x1c8>)
 8001e44:	5ccb      	ldrb	r3, [r1, r3]
 8001e46:	fa22 f303 	lsr.w	r3, r2, r3
 8001e4a:	4a09      	ldr	r2, [pc, #36]	; (8001e70 <HAL_RCC_ClockConfig+0x1cc>)
 8001e4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e4e:	4b09      	ldr	r3, [pc, #36]	; (8001e74 <HAL_RCC_ClockConfig+0x1d0>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7ff f97e 	bl	8001154 <HAL_InitTick>

  return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3710      	adds	r7, #16
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	40022000 	.word	0x40022000
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	080027e4 	.word	0x080027e4
 8001e70:	20000054 	.word	0x20000054
 8001e74:	20000058 	.word	0x20000058

08001e78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e78:	b490      	push	{r4, r7}
 8001e7a:	b08a      	sub	sp, #40	; 0x28
 8001e7c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001e7e:	4b29      	ldr	r3, [pc, #164]	; (8001f24 <HAL_RCC_GetSysClockFreq+0xac>)
 8001e80:	1d3c      	adds	r4, r7, #4
 8001e82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001e88:	f240 2301 	movw	r3, #513	; 0x201
 8001e8c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	61fb      	str	r3, [r7, #28]
 8001e92:	2300      	movs	r3, #0
 8001e94:	61bb      	str	r3, [r7, #24]
 8001e96:	2300      	movs	r3, #0
 8001e98:	627b      	str	r3, [r7, #36]	; 0x24
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ea2:	4b21      	ldr	r3, [pc, #132]	; (8001f28 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	f003 030c 	and.w	r3, r3, #12
 8001eae:	2b04      	cmp	r3, #4
 8001eb0:	d002      	beq.n	8001eb8 <HAL_RCC_GetSysClockFreq+0x40>
 8001eb2:	2b08      	cmp	r3, #8
 8001eb4:	d003      	beq.n	8001ebe <HAL_RCC_GetSysClockFreq+0x46>
 8001eb6:	e02b      	b.n	8001f10 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001eb8:	4b1c      	ldr	r3, [pc, #112]	; (8001f2c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001eba:	623b      	str	r3, [r7, #32]
      break;
 8001ebc:	e02b      	b.n	8001f16 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	0c9b      	lsrs	r3, r3, #18
 8001ec2:	f003 030f 	and.w	r3, r3, #15
 8001ec6:	3328      	adds	r3, #40	; 0x28
 8001ec8:	443b      	add	r3, r7
 8001eca:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001ece:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d012      	beq.n	8001f00 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001eda:	4b13      	ldr	r3, [pc, #76]	; (8001f28 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	0c5b      	lsrs	r3, r3, #17
 8001ee0:	f003 0301 	and.w	r3, r3, #1
 8001ee4:	3328      	adds	r3, #40	; 0x28
 8001ee6:	443b      	add	r3, r7
 8001ee8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001eec:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	4a0e      	ldr	r2, [pc, #56]	; (8001f2c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ef2:	fb03 f202 	mul.w	r2, r3, r2
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001efc:	627b      	str	r3, [r7, #36]	; 0x24
 8001efe:	e004      	b.n	8001f0a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	4a0b      	ldr	r2, [pc, #44]	; (8001f30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f04:	fb02 f303 	mul.w	r3, r2, r3
 8001f08:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0c:	623b      	str	r3, [r7, #32]
      break;
 8001f0e:	e002      	b.n	8001f16 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f10:	4b06      	ldr	r3, [pc, #24]	; (8001f2c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f12:	623b      	str	r3, [r7, #32]
      break;
 8001f14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f16:	6a3b      	ldr	r3, [r7, #32]
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3728      	adds	r7, #40	; 0x28
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bc90      	pop	{r4, r7}
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	080027d4 	.word	0x080027d4
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	007a1200 	.word	0x007a1200
 8001f30:	003d0900 	.word	0x003d0900

08001f34 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f3c:	4b0a      	ldr	r3, [pc, #40]	; (8001f68 <RCC_Delay+0x34>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a0a      	ldr	r2, [pc, #40]	; (8001f6c <RCC_Delay+0x38>)
 8001f42:	fba2 2303 	umull	r2, r3, r2, r3
 8001f46:	0a5b      	lsrs	r3, r3, #9
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	fb02 f303 	mul.w	r3, r2, r3
 8001f4e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f50:	bf00      	nop
  }
  while (Delay --);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	1e5a      	subs	r2, r3, #1
 8001f56:	60fa      	str	r2, [r7, #12]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d1f9      	bne.n	8001f50 <RCC_Delay+0x1c>
}
 8001f5c:	bf00      	nop
 8001f5e:	bf00      	nop
 8001f60:	3714      	adds	r7, #20
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bc80      	pop	{r7}
 8001f66:	4770      	bx	lr
 8001f68:	20000054 	.word	0x20000054
 8001f6c:	10624dd3 	.word	0x10624dd3

08001f70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e041      	b.n	8002006 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d106      	bne.n	8001f9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f7ff f844 	bl	8001024 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2202      	movs	r2, #2
 8001fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	3304      	adds	r3, #4
 8001fac:	4619      	mov	r1, r3
 8001fae:	4610      	mov	r0, r2
 8001fb0:	f000 fa70 	bl	8002494 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
	...

08002010 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800201e:	b2db      	uxtb	r3, r3
 8002020:	2b01      	cmp	r3, #1
 8002022:	d001      	beq.n	8002028 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e03a      	b.n	800209e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2202      	movs	r2, #2
 800202c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	68da      	ldr	r2, [r3, #12]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f042 0201 	orr.w	r2, r2, #1
 800203e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a18      	ldr	r2, [pc, #96]	; (80020a8 <HAL_TIM_Base_Start_IT+0x98>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d00e      	beq.n	8002068 <HAL_TIM_Base_Start_IT+0x58>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002052:	d009      	beq.n	8002068 <HAL_TIM_Base_Start_IT+0x58>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a14      	ldr	r2, [pc, #80]	; (80020ac <HAL_TIM_Base_Start_IT+0x9c>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d004      	beq.n	8002068 <HAL_TIM_Base_Start_IT+0x58>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a13      	ldr	r2, [pc, #76]	; (80020b0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d111      	bne.n	800208c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f003 0307 	and.w	r3, r3, #7
 8002072:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2b06      	cmp	r3, #6
 8002078:	d010      	beq.n	800209c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f042 0201 	orr.w	r2, r2, #1
 8002088:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800208a:	e007      	b.n	800209c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f042 0201 	orr.w	r2, r2, #1
 800209a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3714      	adds	r7, #20
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bc80      	pop	{r7}
 80020a6:	4770      	bx	lr
 80020a8:	40012c00 	.word	0x40012c00
 80020ac:	40000400 	.word	0x40000400
 80020b0:	40000800 	.word	0x40000800

080020b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	691b      	ldr	r3, [r3, #16]
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d122      	bne.n	8002110 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	f003 0302 	and.w	r3, r3, #2
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d11b      	bne.n	8002110 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f06f 0202 	mvn.w	r2, #2
 80020e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2201      	movs	r2, #1
 80020e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	699b      	ldr	r3, [r3, #24]
 80020ee:	f003 0303 	and.w	r3, r3, #3
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d003      	beq.n	80020fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 f9b1 	bl	800245e <HAL_TIM_IC_CaptureCallback>
 80020fc:	e005      	b.n	800210a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f000 f9a4 	bl	800244c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f000 f9b3 	bl	8002470 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	f003 0304 	and.w	r3, r3, #4
 800211a:	2b04      	cmp	r3, #4
 800211c:	d122      	bne.n	8002164 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	f003 0304 	and.w	r3, r3, #4
 8002128:	2b04      	cmp	r3, #4
 800212a:	d11b      	bne.n	8002164 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f06f 0204 	mvn.w	r2, #4
 8002134:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2202      	movs	r2, #2
 800213a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002146:	2b00      	cmp	r3, #0
 8002148:	d003      	beq.n	8002152 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 f987 	bl	800245e <HAL_TIM_IC_CaptureCallback>
 8002150:	e005      	b.n	800215e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f000 f97a 	bl	800244c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f000 f989 	bl	8002470 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	f003 0308 	and.w	r3, r3, #8
 800216e:	2b08      	cmp	r3, #8
 8002170:	d122      	bne.n	80021b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	f003 0308 	and.w	r3, r3, #8
 800217c:	2b08      	cmp	r3, #8
 800217e:	d11b      	bne.n	80021b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f06f 0208 	mvn.w	r2, #8
 8002188:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2204      	movs	r2, #4
 800218e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	69db      	ldr	r3, [r3, #28]
 8002196:	f003 0303 	and.w	r3, r3, #3
 800219a:	2b00      	cmp	r3, #0
 800219c:	d003      	beq.n	80021a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f000 f95d 	bl	800245e <HAL_TIM_IC_CaptureCallback>
 80021a4:	e005      	b.n	80021b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f000 f950 	bl	800244c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f000 f95f 	bl	8002470 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	f003 0310 	and.w	r3, r3, #16
 80021c2:	2b10      	cmp	r3, #16
 80021c4:	d122      	bne.n	800220c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	f003 0310 	and.w	r3, r3, #16
 80021d0:	2b10      	cmp	r3, #16
 80021d2:	d11b      	bne.n	800220c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f06f 0210 	mvn.w	r2, #16
 80021dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2208      	movs	r2, #8
 80021e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	69db      	ldr	r3, [r3, #28]
 80021ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d003      	beq.n	80021fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 f933 	bl	800245e <HAL_TIM_IC_CaptureCallback>
 80021f8:	e005      	b.n	8002206 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 f926 	bl	800244c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f000 f935 	bl	8002470 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	2b01      	cmp	r3, #1
 8002218:	d10e      	bne.n	8002238 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	f003 0301 	and.w	r3, r3, #1
 8002224:	2b01      	cmp	r3, #1
 8002226:	d107      	bne.n	8002238 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f06f 0201 	mvn.w	r2, #1
 8002230:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f7fe fe50 	bl	8000ed8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002242:	2b80      	cmp	r3, #128	; 0x80
 8002244:	d10e      	bne.n	8002264 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002250:	2b80      	cmp	r3, #128	; 0x80
 8002252:	d107      	bne.n	8002264 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800225c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 fa77 	bl	8002752 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800226e:	2b40      	cmp	r3, #64	; 0x40
 8002270:	d10e      	bne.n	8002290 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800227c:	2b40      	cmp	r3, #64	; 0x40
 800227e:	d107      	bne.n	8002290 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f000 f8f9 	bl	8002482 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	f003 0320 	and.w	r3, r3, #32
 800229a:	2b20      	cmp	r3, #32
 800229c:	d10e      	bne.n	80022bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	f003 0320 	and.w	r3, r3, #32
 80022a8:	2b20      	cmp	r3, #32
 80022aa:	d107      	bne.n	80022bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f06f 0220 	mvn.w	r2, #32
 80022b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 fa42 	bl	8002740 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022bc:	bf00      	nop
 80022be:	3708      	adds	r7, #8
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d101      	bne.n	80022dc <HAL_TIM_ConfigClockSource+0x18>
 80022d8:	2302      	movs	r3, #2
 80022da:	e0b3      	b.n	8002444 <HAL_TIM_ConfigClockSource+0x180>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2202      	movs	r2, #2
 80022e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80022fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002302:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	68fa      	ldr	r2, [r7, #12]
 800230a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002314:	d03e      	beq.n	8002394 <HAL_TIM_ConfigClockSource+0xd0>
 8002316:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800231a:	f200 8087 	bhi.w	800242c <HAL_TIM_ConfigClockSource+0x168>
 800231e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002322:	f000 8085 	beq.w	8002430 <HAL_TIM_ConfigClockSource+0x16c>
 8002326:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800232a:	d87f      	bhi.n	800242c <HAL_TIM_ConfigClockSource+0x168>
 800232c:	2b70      	cmp	r3, #112	; 0x70
 800232e:	d01a      	beq.n	8002366 <HAL_TIM_ConfigClockSource+0xa2>
 8002330:	2b70      	cmp	r3, #112	; 0x70
 8002332:	d87b      	bhi.n	800242c <HAL_TIM_ConfigClockSource+0x168>
 8002334:	2b60      	cmp	r3, #96	; 0x60
 8002336:	d050      	beq.n	80023da <HAL_TIM_ConfigClockSource+0x116>
 8002338:	2b60      	cmp	r3, #96	; 0x60
 800233a:	d877      	bhi.n	800242c <HAL_TIM_ConfigClockSource+0x168>
 800233c:	2b50      	cmp	r3, #80	; 0x50
 800233e:	d03c      	beq.n	80023ba <HAL_TIM_ConfigClockSource+0xf6>
 8002340:	2b50      	cmp	r3, #80	; 0x50
 8002342:	d873      	bhi.n	800242c <HAL_TIM_ConfigClockSource+0x168>
 8002344:	2b40      	cmp	r3, #64	; 0x40
 8002346:	d058      	beq.n	80023fa <HAL_TIM_ConfigClockSource+0x136>
 8002348:	2b40      	cmp	r3, #64	; 0x40
 800234a:	d86f      	bhi.n	800242c <HAL_TIM_ConfigClockSource+0x168>
 800234c:	2b30      	cmp	r3, #48	; 0x30
 800234e:	d064      	beq.n	800241a <HAL_TIM_ConfigClockSource+0x156>
 8002350:	2b30      	cmp	r3, #48	; 0x30
 8002352:	d86b      	bhi.n	800242c <HAL_TIM_ConfigClockSource+0x168>
 8002354:	2b20      	cmp	r3, #32
 8002356:	d060      	beq.n	800241a <HAL_TIM_ConfigClockSource+0x156>
 8002358:	2b20      	cmp	r3, #32
 800235a:	d867      	bhi.n	800242c <HAL_TIM_ConfigClockSource+0x168>
 800235c:	2b00      	cmp	r3, #0
 800235e:	d05c      	beq.n	800241a <HAL_TIM_ConfigClockSource+0x156>
 8002360:	2b10      	cmp	r3, #16
 8002362:	d05a      	beq.n	800241a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002364:	e062      	b.n	800242c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6818      	ldr	r0, [r3, #0]
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	6899      	ldr	r1, [r3, #8]
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685a      	ldr	r2, [r3, #4]
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	f000 f966 	bl	8002646 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002388:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	609a      	str	r2, [r3, #8]
      break;
 8002392:	e04e      	b.n	8002432 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6818      	ldr	r0, [r3, #0]
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	6899      	ldr	r1, [r3, #8]
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685a      	ldr	r2, [r3, #4]
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	f000 f94f 	bl	8002646 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	689a      	ldr	r2, [r3, #8]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023b6:	609a      	str	r2, [r3, #8]
      break;
 80023b8:	e03b      	b.n	8002432 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6818      	ldr	r0, [r3, #0]
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	6859      	ldr	r1, [r3, #4]
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	461a      	mov	r2, r3
 80023c8:	f000 f8c6 	bl	8002558 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2150      	movs	r1, #80	; 0x50
 80023d2:	4618      	mov	r0, r3
 80023d4:	f000 f91d 	bl	8002612 <TIM_ITRx_SetConfig>
      break;
 80023d8:	e02b      	b.n	8002432 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6818      	ldr	r0, [r3, #0]
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	6859      	ldr	r1, [r3, #4]
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	461a      	mov	r2, r3
 80023e8:	f000 f8e4 	bl	80025b4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2160      	movs	r1, #96	; 0x60
 80023f2:	4618      	mov	r0, r3
 80023f4:	f000 f90d 	bl	8002612 <TIM_ITRx_SetConfig>
      break;
 80023f8:	e01b      	b.n	8002432 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6818      	ldr	r0, [r3, #0]
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	6859      	ldr	r1, [r3, #4]
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	461a      	mov	r2, r3
 8002408:	f000 f8a6 	bl	8002558 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2140      	movs	r1, #64	; 0x40
 8002412:	4618      	mov	r0, r3
 8002414:	f000 f8fd 	bl	8002612 <TIM_ITRx_SetConfig>
      break;
 8002418:	e00b      	b.n	8002432 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4619      	mov	r1, r3
 8002424:	4610      	mov	r0, r2
 8002426:	f000 f8f4 	bl	8002612 <TIM_ITRx_SetConfig>
        break;
 800242a:	e002      	b.n	8002432 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800242c:	bf00      	nop
 800242e:	e000      	b.n	8002432 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002430:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2201      	movs	r2, #1
 8002436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	3710      	adds	r7, #16
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002454:	bf00      	nop
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	bc80      	pop	{r7}
 800245c:	4770      	bx	lr

0800245e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800245e:	b480      	push	{r7}
 8002460:	b083      	sub	sp, #12
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002466:	bf00      	nop
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	bc80      	pop	{r7}
 800246e:	4770      	bx	lr

08002470 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	bc80      	pop	{r7}
 8002480:	4770      	bx	lr

08002482 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002482:	b480      	push	{r7}
 8002484:	b083      	sub	sp, #12
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800248a:	bf00      	nop
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	bc80      	pop	{r7}
 8002492:	4770      	bx	lr

08002494 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4a29      	ldr	r2, [pc, #164]	; (800254c <TIM_Base_SetConfig+0xb8>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d00b      	beq.n	80024c4 <TIM_Base_SetConfig+0x30>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024b2:	d007      	beq.n	80024c4 <TIM_Base_SetConfig+0x30>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4a26      	ldr	r2, [pc, #152]	; (8002550 <TIM_Base_SetConfig+0xbc>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d003      	beq.n	80024c4 <TIM_Base_SetConfig+0x30>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4a25      	ldr	r2, [pc, #148]	; (8002554 <TIM_Base_SetConfig+0xc0>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d108      	bne.n	80024d6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	68fa      	ldr	r2, [r7, #12]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a1c      	ldr	r2, [pc, #112]	; (800254c <TIM_Base_SetConfig+0xb8>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d00b      	beq.n	80024f6 <TIM_Base_SetConfig+0x62>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024e4:	d007      	beq.n	80024f6 <TIM_Base_SetConfig+0x62>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a19      	ldr	r2, [pc, #100]	; (8002550 <TIM_Base_SetConfig+0xbc>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d003      	beq.n	80024f6 <TIM_Base_SetConfig+0x62>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a18      	ldr	r2, [pc, #96]	; (8002554 <TIM_Base_SetConfig+0xc0>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d108      	bne.n	8002508 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	4313      	orrs	r3, r2
 8002506:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	695b      	ldr	r3, [r3, #20]
 8002512:	4313      	orrs	r3, r2
 8002514:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	68fa      	ldr	r2, [r7, #12]
 800251a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	689a      	ldr	r2, [r3, #8]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4a07      	ldr	r2, [pc, #28]	; (800254c <TIM_Base_SetConfig+0xb8>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d103      	bne.n	800253c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	691a      	ldr	r2, [r3, #16]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	615a      	str	r2, [r3, #20]
}
 8002542:	bf00      	nop
 8002544:	3714      	adds	r7, #20
 8002546:	46bd      	mov	sp, r7
 8002548:	bc80      	pop	{r7}
 800254a:	4770      	bx	lr
 800254c:	40012c00 	.word	0x40012c00
 8002550:	40000400 	.word	0x40000400
 8002554:	40000800 	.word	0x40000800

08002558 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002558:	b480      	push	{r7}
 800255a:	b087      	sub	sp, #28
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6a1b      	ldr	r3, [r3, #32]
 8002568:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6a1b      	ldr	r3, [r3, #32]
 800256e:	f023 0201 	bic.w	r2, r3, #1
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002582:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	011b      	lsls	r3, r3, #4
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	4313      	orrs	r3, r2
 800258c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	f023 030a 	bic.w	r3, r3, #10
 8002594:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002596:	697a      	ldr	r2, [r7, #20]
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	4313      	orrs	r3, r2
 800259c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	693a      	ldr	r2, [r7, #16]
 80025a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	697a      	ldr	r2, [r7, #20]
 80025a8:	621a      	str	r2, [r3, #32]
}
 80025aa:	bf00      	nop
 80025ac:	371c      	adds	r7, #28
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bc80      	pop	{r7}
 80025b2:	4770      	bx	lr

080025b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b087      	sub	sp, #28
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6a1b      	ldr	r3, [r3, #32]
 80025c4:	f023 0210 	bic.w	r2, r3, #16
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6a1b      	ldr	r3, [r3, #32]
 80025d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80025de:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	031b      	lsls	r3, r3, #12
 80025e4:	697a      	ldr	r2, [r7, #20]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80025f0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	011b      	lsls	r3, r3, #4
 80025f6:	693a      	ldr	r2, [r7, #16]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	697a      	ldr	r2, [r7, #20]
 8002600:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	621a      	str	r2, [r3, #32]
}
 8002608:	bf00      	nop
 800260a:	371c      	adds	r7, #28
 800260c:	46bd      	mov	sp, r7
 800260e:	bc80      	pop	{r7}
 8002610:	4770      	bx	lr

08002612 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002612:	b480      	push	{r7}
 8002614:	b085      	sub	sp, #20
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
 800261a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002628:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	4313      	orrs	r3, r2
 8002630:	f043 0307 	orr.w	r3, r3, #7
 8002634:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	68fa      	ldr	r2, [r7, #12]
 800263a:	609a      	str	r2, [r3, #8]
}
 800263c:	bf00      	nop
 800263e:	3714      	adds	r7, #20
 8002640:	46bd      	mov	sp, r7
 8002642:	bc80      	pop	{r7}
 8002644:	4770      	bx	lr

08002646 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002646:	b480      	push	{r7}
 8002648:	b087      	sub	sp, #28
 800264a:	af00      	add	r7, sp, #0
 800264c:	60f8      	str	r0, [r7, #12]
 800264e:	60b9      	str	r1, [r7, #8]
 8002650:	607a      	str	r2, [r7, #4]
 8002652:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002660:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	021a      	lsls	r2, r3, #8
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	431a      	orrs	r2, r3
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	4313      	orrs	r3, r2
 800266e:	697a      	ldr	r2, [r7, #20]
 8002670:	4313      	orrs	r3, r2
 8002672:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	609a      	str	r2, [r3, #8]
}
 800267a:	bf00      	nop
 800267c:	371c      	adds	r7, #28
 800267e:	46bd      	mov	sp, r7
 8002680:	bc80      	pop	{r7}
 8002682:	4770      	bx	lr

08002684 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002694:	2b01      	cmp	r3, #1
 8002696:	d101      	bne.n	800269c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002698:	2302      	movs	r3, #2
 800269a:	e046      	b.n	800272a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2202      	movs	r2, #2
 80026a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	68fa      	ldr	r2, [r7, #12]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68fa      	ldr	r2, [r7, #12]
 80026d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a16      	ldr	r2, [pc, #88]	; (8002734 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d00e      	beq.n	80026fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026e8:	d009      	beq.n	80026fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a12      	ldr	r2, [pc, #72]	; (8002738 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d004      	beq.n	80026fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a10      	ldr	r2, [pc, #64]	; (800273c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d10c      	bne.n	8002718 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002704:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	68ba      	ldr	r2, [r7, #8]
 800270c:	4313      	orrs	r3, r2
 800270e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	68ba      	ldr	r2, [r7, #8]
 8002716:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3714      	adds	r7, #20
 800272e:	46bd      	mov	sp, r7
 8002730:	bc80      	pop	{r7}
 8002732:	4770      	bx	lr
 8002734:	40012c00 	.word	0x40012c00
 8002738:	40000400 	.word	0x40000400
 800273c:	40000800 	.word	0x40000800

08002740 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	bc80      	pop	{r7}
 8002750:	4770      	bx	lr

08002752 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002752:	b480      	push	{r7}
 8002754:	b083      	sub	sp, #12
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800275a:	bf00      	nop
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	bc80      	pop	{r7}
 8002762:	4770      	bx	lr

08002764 <__libc_init_array>:
 8002764:	b570      	push	{r4, r5, r6, lr}
 8002766:	2600      	movs	r6, #0
 8002768:	4d0c      	ldr	r5, [pc, #48]	; (800279c <__libc_init_array+0x38>)
 800276a:	4c0d      	ldr	r4, [pc, #52]	; (80027a0 <__libc_init_array+0x3c>)
 800276c:	1b64      	subs	r4, r4, r5
 800276e:	10a4      	asrs	r4, r4, #2
 8002770:	42a6      	cmp	r6, r4
 8002772:	d109      	bne.n	8002788 <__libc_init_array+0x24>
 8002774:	f000 f822 	bl	80027bc <_init>
 8002778:	2600      	movs	r6, #0
 800277a:	4d0a      	ldr	r5, [pc, #40]	; (80027a4 <__libc_init_array+0x40>)
 800277c:	4c0a      	ldr	r4, [pc, #40]	; (80027a8 <__libc_init_array+0x44>)
 800277e:	1b64      	subs	r4, r4, r5
 8002780:	10a4      	asrs	r4, r4, #2
 8002782:	42a6      	cmp	r6, r4
 8002784:	d105      	bne.n	8002792 <__libc_init_array+0x2e>
 8002786:	bd70      	pop	{r4, r5, r6, pc}
 8002788:	f855 3b04 	ldr.w	r3, [r5], #4
 800278c:	4798      	blx	r3
 800278e:	3601      	adds	r6, #1
 8002790:	e7ee      	b.n	8002770 <__libc_init_array+0xc>
 8002792:	f855 3b04 	ldr.w	r3, [r5], #4
 8002796:	4798      	blx	r3
 8002798:	3601      	adds	r6, #1
 800279a:	e7f2      	b.n	8002782 <__libc_init_array+0x1e>
 800279c:	080027f4 	.word	0x080027f4
 80027a0:	080027f4 	.word	0x080027f4
 80027a4:	080027f4 	.word	0x080027f4
 80027a8:	080027f8 	.word	0x080027f8

080027ac <memset>:
 80027ac:	4603      	mov	r3, r0
 80027ae:	4402      	add	r2, r0
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d100      	bne.n	80027b6 <memset+0xa>
 80027b4:	4770      	bx	lr
 80027b6:	f803 1b01 	strb.w	r1, [r3], #1
 80027ba:	e7f9      	b.n	80027b0 <memset+0x4>

080027bc <_init>:
 80027bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027be:	bf00      	nop
 80027c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027c2:	bc08      	pop	{r3}
 80027c4:	469e      	mov	lr, r3
 80027c6:	4770      	bx	lr

080027c8 <_fini>:
 80027c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027ca:	bf00      	nop
 80027cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027ce:	bc08      	pop	{r3}
 80027d0:	469e      	mov	lr, r3
 80027d2:	4770      	bx	lr
